{"version":3,"sources":["services/data-service.ts","components/DataTableApi/DataTableApi.tsx","components/SelectAPI/SelectAPI.tsx","components/PinDepthTable/PinDepthTable.tsx","services/yardage-utils.ts","components/MarkerDepthTable/MarkerDepthTable.tsx","components/HoleYardageTable/HoleYardageTable.tsx","components/CourseAnalysisTable/CourseAnalysisTable.tsx","components/DynamicInput/DynamicInput.tsx","services/calculation-utils.ts","components/FinalAnalysisTable/DesiredYardageCountTable/DesiredYardageCountTable.tsx","components/FinalAnalysisTable/CombinationTable/CombinationTable.tsx","components/FinalAnalysisTable/FinalAnalysisTable.tsx","components/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataService","data","holes","filter","hole","markers","map","id","parFilter","par","toString","allIds","forEach","pinLocations","pinLocation","includes","push","holeId","pinId","retVal","foundHole","find","foundPinLocationInfo","console","log","markerId","foundMarkerInfo","marker","DataTableApi","columns","this","props","header","index","name","selector","wrap","minWidth","slice","length","row","flatMappedData","val","key","noHeader","fixedHeaderScrollHeight","Component","SelectAPI","handleChange","bind","optionsHTML","options","option","i","value","onChange","event","target","PinDepthTable","state","handleParFilterChange","holeIds","getAllHoleIds","pinLocationIds","getAllPinLocationIds","headerRow","dataRows","dataRow","rowSum","pinInfo","getPinInfoForHole","cellVal","depth","finalData","newVal","setState","YardageUtils","total","Math","floor","MarkerDepthTable","markerIds","getAllMarkerIds","depthSum","deltaSum","markerInfo","getMarkerInfoForHole","delta","computePlusMinus","HoleYardageTable","yardageSum","yardage","CourseAnalysisTable","markerFilter","handleMarkerFilterChange","pinIds","parseInt","maxSum","minSum","pinDepth","markerDepth","markerDepthDelta","highTotal","lowTotal","markerIdsAsStr","DynamicInput","type","CalculationUtils","desiredYardage","constantYardage","markerDelta","desiredYardageDelta","abs","desiredYardages","yardageCalcArr","combos","recursiveFunction","combo","possibleValues","filtered","filterPossibleValues","lastElement","pop","cloneCombo","comboHoleIds","comboDesiredYardages","comboPinId","findIndex","dy","cloned","DesiredYardageCountTable","count","numOfMatches","countData","CombinationTable","handleClick","findAllCombos","found","markerAdjustment","parOptions","defaultParToBeginingYardage","FinalAnalysisTable","handleDesiredYardageChange","cloneNumberArray","desiredYardageInputs","canCombinationProduceDesiredYardage","arr","beginVal","createdDesireYardages","Main","pinLocationId","overviewPinDepthSum","handlePinLocationIdChange","handleAnyInputChange","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.77c5d0cf.chunk.js","sourcesContent":["import data from \"../resources/data.json\";\n\nexport class DataService {\n  public static getAllData() {\n    return data;\n  }\n  /* This will disappear when all data is present */\n  public static getAllHoleIdsWithMarkers() {\n    const fitleredHoles = data.holes.filter((hole) => {\n      if (hole.markers) return true;\n      else return false;\n    });\n    const holeIds = fitleredHoles.map((hole) => {\n      return hole.id;\n    });\n    return holeIds;\n  }\n  public static getAllHoleIds(parFilter: string | null) {\n    // apply filters\n    let fitleredHoles = data.holes;\n    if (parFilter) {\n      fitleredHoles = data.holes.filter(\n        (hole) => hole.par.toString() === parFilter\n      );\n    } else {\n      fitleredHoles = data.holes;\n    }\n\n    const holeIds = fitleredHoles.map((hole) => {\n      return hole.id;\n    });\n    return holeIds;\n  }\n  public static getAllPinLocationIds() {\n    const allIds: number[] = [];\n    data.holes.forEach((hole) => {\n      const pinLocationIdsForHole = hole.pinLocations.map((pinLocation) => {\n        return pinLocation.id;\n      });\n      // add all new ids\n      pinLocationIdsForHole.forEach((id) => {\n        if (!allIds.includes(id)) {\n          allIds.push(id);\n        }\n      });\n    });\n    return allIds;\n  }\n  public static getPinInfoForHole(holeId: number, pinId: number) {\n    let retVal = null;\n    const foundHole = data.holes.find((hole) => hole.id === holeId);\n    if (foundHole) {\n      const foundPinLocationInfo = foundHole.pinLocations.find(\n        (pinLocation) => pinLocation.id === pinId\n      );\n      if (foundPinLocationInfo) {\n        retVal = foundPinLocationInfo;\n      } else {\n        console.log(\n          \"Could not find pin location \" + pinId + \" at hole \" + holeId + \".\"\n        );\n      }\n    } else {\n      console.log(\"Could not find hole \" + holeId + \".\");\n    }\n    return retVal;\n  }\n  public static getAllMarkerIds() {\n    const allIds: number[] = [];\n    data.holes.forEach((hole) => {\n      if (hole.markers) {\n        const pinLocationIdsForHole = hole.markers.map((pinLocation) => {\n          return pinLocation.id;\n        });\n        // add all new ids\n        pinLocationIdsForHole.forEach((id) => {\n          if (!allIds.includes(id)) {\n            allIds.push(id);\n          }\n        });\n      }\n    });\n    return allIds;\n  }\n  public static getMarkerInfoForHole(holeId: number, markerId: number) {\n    let retVal = null;\n    const foundHole = data.holes.find((hole) => hole.id === holeId);\n    if (foundHole) {\n      if (foundHole.markers) {\n        const foundMarkerInfo = foundHole.markers.find(\n          (marker) => marker.id === markerId\n        );\n        if (foundMarkerInfo) {\n          retVal = foundMarkerInfo;\n        } else {\n          console.log(\n            \"Could not find marker \" + markerId + \" at hole \" + holeId + \".\"\n          );\n        }\n      }\n    } else {\n      console.log(\"Could not find hole \" + holeId + \".\");\n    }\n    return retVal;\n  }\n}\n","import React, { Component } from 'react';\n\nimport DataTable from 'react-data-table-component'\n\n\nclass DataTableApi extends Component<{ data: string[][] }, {}> {\n\n    public render() {\n        const headerRow = this.props.data[0];\n        const columns = headerRow.map((header, index) => {\n            return {\n                name: header,\n                selector: index.toString(),\n                wrap: true,\n                minWidth: \"120px\"\n            }\n        });\n        const dataRows = this.props.data.slice(1, this.props.data.length);\n        const data = dataRows.map((row, index) => {\n            const flatMappedData: any = {};\n            row.forEach((val, index) => {\n                const key = index.toString()\n                flatMappedData[key] = val;\n            });\n            return flatMappedData;\n        })\n        return (\n            <DataTable noHeader={true} data={data} columns={columns}\n                fixedHeaderScrollHeight=\"300px\"></DataTable>\n\n        );\n    }\n}\n\nexport default DataTableApi;\n","import React, { Component } from 'react';\nclass SelectAPI extends Component<{ options: string[], value: string, handleChange(val: string): void }, {}> {\n    constructor(props: any) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    public render() {\n        const optionsHTML = this.props.options.map((option, i) => {\n            return <option key={'option: ' + i}>{option}</option>\n        })\n        return <div>\n            <select value={this.props.value} onChange={this.handleChange}>\n                {optionsHTML}\n            </select>\n        </div>\n    }\n\n    public handleChange(event: React.ChangeEvent<HTMLSelectElement>) {\n        this.props.handleChange(event.target.value);\n    }\n}\n\nexport default SelectAPI;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport DataTableApi from '../DataTableApi/DataTableApi';\nimport SelectAPI from '../SelectAPI/SelectAPI';\n\nconst options = ['Any', '3', '4', '5'];\nclass PinDepthTable extends Component<{}, { parFilter: string }> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      parFilter: '3'\n    }\n    this.handleParFilterChange = this.handleParFilterChange.bind(this);\n  }\n\n  public render() {\n    let holeIds: number[] = [];\n    if (this.state.parFilter === 'Any') {\n      holeIds = DataService.getAllHoleIds(null);\n    } else {\n      holeIds = DataService.getAllHoleIds(this.state.parFilter);\n    }\n    const pinLocationIds = DataService.getAllPinLocationIds();\n\n    // construct header row\n    const headerRow: string[] = [];\n    headerRow.push('Pin Location Id');\n    holeIds.forEach((holeId) => {\n      headerRow.push('Hole #' + holeId.toString());\n    });\n    headerRow.push('Total');\n\n    // construct data rows\n    const dataRows = pinLocationIds.map((pinId) => {\n      // construct data row\n      const dataRow: string[] = [];\n      dataRow.push(pinId.toString());\n      let rowSum = 0;\n      holeIds.forEach((holeId) => {\n        const pinInfo = DataService.getPinInfoForHole(holeId, pinId);\n        // default\n        let cellVal = '-';\n        if (pinInfo) {\n          rowSum += pinInfo.depth;\n          cellVal = pinInfo.depth.toString();\n        }\n        dataRow.push(cellVal);\n      });\n      dataRow.push(rowSum.toString());\n      return dataRow;\n    });\n\n\n    const finalData: string[][] = [];\n    finalData.push(headerRow);\n    dataRows.forEach((row) => finalData.push(row));\n\n    return (<div>\n      <div>\n        Par\n        <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n      </div>\n      <DataTableApi data={finalData}></DataTableApi>\n    </div>);\n  }\n  public handleParFilterChange(newVal: string) {\n    this.setState({ parFilter: newVal });\n  }\n}\n\nexport default PinDepthTable;\n","export class YardageUtils {\n  public static computePlusMinus(total: number) {\n    return Math.floor(total / 2) - 1;\n  }\n}\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport DataTableApi from '../DataTableApi/DataTableApi';\nimport SelectAPI from '../SelectAPI/SelectAPI';\nimport { YardageUtils } from '../../services/yardage-utils';\n\nconst options = ['Any', '3', '4', '5'];\nclass MarkerDepthTable extends Component<{}, { parFilter: string }> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            parFilter: '3'\n        }\n        this.handleParFilterChange = this.handleParFilterChange.bind(this);\n    }\n    public render() {\n        let holeIds: number[] = [];\n        if (this.state.parFilter === 'Any') {\n            holeIds = DataService.getAllHoleIds(null);\n        } else {\n            holeIds = DataService.getAllHoleIds(this.state.parFilter);\n        }\n        const markerIds = DataService.getAllMarkerIds();\n\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Marker Id');\n        holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n        headerRow.push('Total');\n\n        // construct data rows\n        const dataRows = markerIds.map((markerId) => {\n            // construct data row\n            const dataRow: string[] = [];\n            dataRow.push(markerId.toString());\n            let depthSum = 0;\n            let deltaSum = 0;\n            holeIds.forEach((holeId) => {\n                const markerInfo = DataService.getMarkerInfoForHole(holeId, markerId);\n                // default\n                let cellVal = '-';\n                if (markerInfo) {\n                    const depth = markerInfo.depth;\n                    const delta = YardageUtils.computePlusMinus(depth);\n                    depthSum += depth;\n                    deltaSum += delta;\n                    cellVal = '(' + depth.toString() + ' / 2) - 1 => \\xB1 ' + delta.toString();\n                }\n                dataRow.push(cellVal);\n            });\n            dataRow.push(depthSum.toString() + ' => \\xB1 ' + deltaSum.toString());\n            return dataRow;\n        });\n\n\n        const finalData: string[][] = [];\n        finalData.push(headerRow);\n        dataRows.forEach((row) => finalData.push(row));\n\n        return (<div>\n            <div>\n                Par <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n            </div>\n            <DataTableApi data={finalData}></DataTableApi>\n        </div>);\n    }\n    public handleParFilterChange(newVal: string) {\n        this.setState({ parFilter: newVal });\n    }\n}\n\nexport default MarkerDepthTable;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport DataTableApi from '../DataTableApi/DataTableApi';\nimport SelectAPI from '../SelectAPI/SelectAPI';\n\nconst options = ['Any', '3', '4', '5'];\nclass HoleYardageTable extends Component<{}, { parFilter: string }> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      parFilter: '3'\n    }\n    this.handleParFilterChange = this.handleParFilterChange.bind(this);\n  }\n\n  public render() {\n    let holeIds: number[] = [];\n    if (this.state.parFilter === 'Any') {\n      holeIds = DataService.getAllHoleIds(null);\n    } else {\n      holeIds = DataService.getAllHoleIds(this.state.parFilter);\n    }\n    const markerIds = DataService.getAllMarkerIds();\n\n    // construct header row\n    const headerRow: string[] = [];\n    headerRow.push('Marker Id');\n    holeIds.forEach((holeId) => {\n      headerRow.push('Hole #' + holeId.toString());\n    });\n    headerRow.push('Total');\n\n    // construct data rows\n    const dataRows = markerIds.map((markerId) => {\n      // construct data row\n      const dataRow: string[] = [];\n      dataRow.push(markerId.toString());\n      let yardageSum = 0;\n      holeIds.forEach((holeId) => {\n        const markerInfo = DataService.getMarkerInfoForHole(holeId, markerId);\n        // default\n        let cellVal = '-';\n        if (markerInfo) {\n          const yardage = markerInfo.yardage;\n          yardageSum += yardage;\n          cellVal = yardage.toString();\n        }\n        dataRow.push(cellVal);\n      });\n      dataRow.push(yardageSum.toString());\n      return dataRow;\n    });\n\n\n\n    const finalData: string[][] = [];\n    finalData.push(headerRow);\n    dataRows.forEach((row) => finalData.push(row));\n\n    return (<div>\n      <div>\n        Par\n        <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n      </div>\n      <DataTableApi data={finalData}></DataTableApi>\n    </div>);\n  }\n  public handleParFilterChange(newVal: string) {\n    this.setState({ parFilter: newVal });\n  }\n}\n\nexport default HoleYardageTable;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport DataTableApi from '../DataTableApi/DataTableApi';\nimport SelectAPI from '../SelectAPI/SelectAPI';\nimport { YardageUtils } from '../../services/yardage-utils';\n\nconst options = ['Any', '3', '4', '5'];\nclass CourseAnalysisTable extends Component<{}, { parFilter: string, markerFilter: string }> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            parFilter: '3',\n            markerFilter: '1'\n        }\n        this.handleParFilterChange = this.handleParFilterChange.bind(this);\n        this.handleMarkerFilterChange = this.handleMarkerFilterChange.bind(this);\n    }\n    public render() {\n        let holeIds: number[] = [];\n        if (this.state.parFilter === 'Any') {\n            holeIds = DataService.getAllHoleIds(null);\n        } else {\n            holeIds = DataService.getAllHoleIds(this.state.parFilter);\n        }\n        const markerIds = DataService.getAllMarkerIds();\n        const pinIds = DataService.getAllPinLocationIds();\n\n        const markerId = parseInt(this.state.markerFilter);\n\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Pin Location Id');\n        holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n        headerRow.push('Total');\n\n        // construct data rows\n        const dataRows = pinIds.map((pinId) => {\n            // construct data row\n            const dataRow: string[] = [];\n            dataRow.push(pinId.toString());\n            let maxSum = 0;\n            let minSum = 0;\n            holeIds.forEach((holeId) => {\n                const markerInfo = DataService.getMarkerInfoForHole(holeId, markerId);\n                const pinInfo = DataService.getPinInfoForHole(holeId, pinId);\n                // default\n                let cellVal = '-';\n                if (markerInfo && pinInfo) {\n                    const yardage = markerInfo.yardage;\n                    const pinDepth = pinInfo.depth;\n                    const markerDepth = markerInfo.depth;\n                    const markerDepthDelta = YardageUtils.computePlusMinus(markerDepth);\n                    // max\n                    const highTotal = yardage + pinDepth + markerDepthDelta;\n                    maxSum += highTotal;\n                    // min\n                    const lowTotal = yardage + pinDepth - markerDepthDelta;\n                    minSum += lowTotal;\n                    cellVal = yardage.toString() + ' + ' + pinDepth.toString() + ' \\xB1  ' + markerDepthDelta.toString() + ' = ( ' + lowTotal.toString() + ', ' + highTotal.toString() + ' )';\n                }\n                dataRow.push(cellVal);\n            });\n            dataRow.push('( ' + minSum.toString() + ', ' + maxSum.toString() + ' )');\n            return dataRow;\n        });\n\n        const finalData: string[][] = [];\n        finalData.push(headerRow);\n        dataRows.forEach((row) => finalData.push(row));\n\n        const markerIdsAsStr = markerIds.map((id) => id.toString());\n        return (<div>\n            <div>\n                Par <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n                Marker <SelectAPI value={this.state.markerFilter} options={markerIdsAsStr} handleChange={this.handleMarkerFilterChange}></SelectAPI>\n            </div>\n            <DataTableApi data={finalData}></DataTableApi>\n        </div>);\n    }\n    public handleParFilterChange(newVal: string) {\n        this.setState({ parFilter: newVal });\n    }\n\n    public handleMarkerFilterChange(newVal: string) {\n        this.setState({ markerFilter: newVal });\n    }\n\n}\n\nexport default CourseAnalysisTable;\n","import React, { Component } from 'react';\n\ntype DynamicInputProps = {\n    //\n    value: number,\n    index: number\n    handleChange(i: number, value: number): void\n};\n\nclass DynamicInput extends Component<DynamicInputProps, any> {\n    constructor(props: DynamicInputProps) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    public render() {\n\n        return <div>\n            <input type=\"text\" value={this.props.value} onChange={this.handleChange} ></input>\n        </div>;\n    }\n    public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        const newVal = parseInt(event.target.value);\n        if (newVal) {\n            this.props.handleChange(this.props.index, newVal);\n        } else {\n            this.props.handleChange(this.props.index, 0);\n        }\n    }\n}\n\nexport default DynamicInput;\n","import { DataService } from \"./data-service\";\nimport { YardageUtils } from \"./yardage-utils\";\nimport { IYardageCalc } from \"../interfaces/IYardageCalc\";\n\nexport class CalculationUtils {\n  public static canCombinationProduceDesiredYardage(\n    holeId: number,\n    pinId: number,\n    markerId: number,\n    desiredYardage: number\n  ) {\n    let retVal = false;\n    // get pinInfo for the hole\n    const pinInfo = DataService.getPinInfoForHole(holeId, pinId);\n    // if markerInfo can get the desiredYardage then add it\n    const markerInfo = DataService.getMarkerInfoForHole(holeId, markerId);\n    if (pinInfo && markerInfo) {\n      // constants\n      const yardage = markerInfo.yardage;\n      const pinDepth = pinInfo.depth;\n      const constantYardage = yardage + pinDepth;\n      const markerDelta = YardageUtils.computePlusMinus(markerInfo.depth);\n      const desiredYardageDelta = constantYardage - desiredYardage;\n      const absDesiredYardageDelta = Math.abs(desiredYardageDelta);\n      // this hole, pin, and marker combination can be used for this desired yardage\n      if (absDesiredYardageDelta < markerDelta) retVal = true;\n    }\n\n    return retVal;\n  }\n  public static findAllCombos(\n    holeIds: number[],\n    desiredYardages: number[],\n    yardageCalcArr: IYardageCalc[]\n  ): IYardageCalc[][] {\n    const combos: IYardageCalc[][] = [];\n    let combo: IYardageCalc[] = [];\n    this.recursiveFunction(\n      combo,\n      combos,\n      holeIds,\n      desiredYardages,\n      yardageCalcArr\n    );\n    return combos;\n  }\n  private static recursiveFunction(\n    combo: IYardageCalc[],\n    combos: IYardageCalc[][],\n    holeIds: number[],\n    desiredYardages: number[],\n    possibleValues: IYardageCalc[]\n  ) {\n    // success base case\n    if (combo.length === desiredYardages.length) {\n      combos.push(this.cloneCombo(combo));\n      return;\n    }\n    // failure base case\n    if (possibleValues.length === 0) {\n      return;\n    }\n    // filter out\n    const filtered: IYardageCalc[] = this.filterPossibleValues(\n      possibleValues,\n      combo\n    );\n    while (filtered.length !== 0) {\n      const lastElement = filtered.pop();\n      if (lastElement) {\n        // add to combo\n        combo.push(lastElement);\n        // recurse\n        this.recursiveFunction(\n          combo,\n          combos,\n          holeIds,\n          desiredYardages,\n          filtered\n        );\n        // remove from combo\n        combo.pop();\n      }\n    }\n  }\n  public static filterPossibleValues(\n    possibleValues: IYardageCalc[],\n    combo: IYardageCalc[]\n  ): IYardageCalc[] {\n    const comboHoleIds = combo.map((val) => val.holeId);\n    const comboDesiredYardages = combo.map((val) => val.desiredYardage);\n    let comboPinId: number | null = null;\n    if (combo.length > 1) {\n      comboPinId = combo[0].pinId;\n    }\n    const filtered = possibleValues\n      .filter((val) => {\n        return comboHoleIds.findIndex((holeId) => val.holeId === holeId) === -1;\n      })\n      .filter((val) => {\n        return (\n          comboDesiredYardages.findIndex((dy) => val.desiredYardage === dy) ===\n          -1\n        );\n      })\n      .filter((val) => {\n        if (comboPinId) return val.pinId === comboPinId;\n        else return true;\n      });\n    return filtered;\n  }\n\n  private static cloneCombo(combo: IYardageCalc[]) {\n    const cloned: IYardageCalc[] = [];\n    combo.forEach((val) => cloned.push(val));\n    return cloned;\n  }\n}\n","import React, { Component } from 'react';\nimport { IYardageCalc } from '../../../interfaces/IYardageCalc';\nimport DataTableApi from '../../DataTableApi/DataTableApi';\n\n\n\n\nclass DesiredYardageCountTable extends Component<{ holeIds: number[], desiredYardages: number[], yardageCalcArr: IYardageCalc[] }, {}> {\n\n    public render() {\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Yardage');\n        this.props.holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n        headerRow.push('Total');\n\n        // construct data rows\n        const dataRows = this.props.desiredYardages.map((desiredYardage) => {\n            // construct data row\n            const dataRow: string[] = [];\n            dataRow.push(desiredYardage.toString());\n            let count = 0;\n            this.props.holeIds.forEach((holeId) => {\n                // default\n                const filtered = this.props.yardageCalcArr.filter((val) => val.holeId === holeId && val.desiredYardage === desiredYardage);\n                let numOfMatches = filtered.length;\n                dataRow.push(numOfMatches.toString());\n                count += numOfMatches;\n            });\n            dataRow.push(count.toString());\n            return dataRow;\n        });\n\n        const countData: string[][] = [];\n        countData.push(headerRow);\n        dataRows.forEach((row) => countData.push(row));\n\n        return (<div>\n            <DataTableApi data={countData}></DataTableApi>\n        </div>);\n    }\n\n}\n\nexport default DesiredYardageCountTable;\n","import React, { Component } from 'react';\nimport { IYardageCalc } from '../../../interfaces/IYardageCalc';\nimport DataTableApi from '../../DataTableApi/DataTableApi';\nimport { CalculationUtils } from '../../../services/calculation-utils';\nimport { DataService } from '../../../services/data-service';\n\nclass CombinationTable extends Component<{ holeIds: number[], desiredYardages: number[], yardageCalcArr: IYardageCalc[] }, {}> {\n\n    constructor(props: any) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    public render() {\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Combination');\n        this.props.holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n\n        // compute combinations\n        const combos = CalculationUtils.findAllCombos(this.props.holeIds, this.props.desiredYardages, this.props.yardageCalcArr);\n        // construct data rows\n        const dataRows = combos.map((combo, index) => {\n            // construct data row\n            const dataRow: string[] = [];\n            dataRow.push((index + 1).toString() + ' => Pin# ' + combo[0].pinId);\n            this.props.holeIds.forEach((holeId) => {\n                // default\n                let cellVal = '-';\n                const found = combo.find((val) => val.holeId === holeId);\n                if (found) {\n                    // show calculations\n                    const pinInfo = DataService.getPinInfoForHole(found.holeId, found.pinId);\n                    const markerInfo = DataService.getMarkerInfoForHole(found.holeId, found.markerId);\n                    if (pinInfo && markerInfo) {\n                        // constants\n                        const yardage = markerInfo.yardage;\n                        const pinDepth = pinInfo.depth;\n                        const constantYardage = yardage + pinDepth;\n                        const markerAdjustment = found.desiredYardage - constantYardage;\n\n                        cellVal = yardage.toString() + ' + ' + pinDepth.toString() + ' + ' + markerAdjustment.toString() + ' = ' + found.desiredYardage.toString() + ' => Marker# ' + markerInfo.id;\n                    }\n\n                }\n                dataRow.push(cellVal);\n            });\n            return dataRow;\n        });\n\n        const countData: string[][] = [];\n        countData.push(headerRow);\n        dataRows.forEach((row) => countData.push(row));\n\n        return (<div>\n            <DataTableApi data={countData}></DataTableApi>\n        </div>);\n    }\n    handleClick() {\n\n    }\n\n}\n\nexport default CombinationTable;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport SelectAPI from '../SelectAPI/SelectAPI';\nimport DynamicInput from '../DynamicInput/DynamicInput';\nimport { CalculationUtils } from '../../services/calculation-utils';\nimport { IYardageCalc } from '../../interfaces/IYardageCalc';\nimport DesiredYardageCountTable from './DesiredYardageCountTable/DesiredYardageCountTable';\nimport CombinationTable from './CombinationTable/CombinationTable';\n\n\nconst parOptions = ['3', '4', '5'];\nconst defaultParToBeginingYardage = {\n    3: 120,\n    4: 280,\n    5: 400,\n}\n\n\n\nclass FinalAnalysisTable extends Component<{}, { parFilter: string, desiredYardages: number[] }> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            parFilter: '3',\n            desiredYardages: [120, 140, 160, 180, 200]\n        }\n        this.handleParFilterChange = this.handleParFilterChange.bind(this);\n        this.handleDesiredYardageChange = this.handleDesiredYardageChange.bind(this);\n\n        this.cloneNumberArray = this.cloneNumberArray.bind(this);\n    }\n    public render() {\n        let holeIds: number[] = [];\n        holeIds = DataService.getAllHoleIds(this.state.parFilter);\n        const markerIds = DataService.getAllMarkerIds();\n        const pinIds = DataService.getAllPinLocationIds();\n\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Options');\n        holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n        headerRow.push('Total');\n\n        const desiredYardageInputs = this.state.desiredYardages.map((desiredYardage, i) => {\n            return <DynamicInput key={'possbileVal' + i} value={desiredYardage} index={i} handleChange={this.handleDesiredYardageChange}></DynamicInput>;\n        })\n        const yardageCalcArr: IYardageCalc[] = [];\n        holeIds.forEach((holeId) => {\n            pinIds.forEach((pinId) => {\n                markerIds.forEach(markerId => {\n                    this.state.desiredYardages.forEach((desiredYardage) => {\n                        if (CalculationUtils.canCombinationProduceDesiredYardage(holeId, pinId, markerId, desiredYardage)) {\n                            yardageCalcArr.push({\n                                holeId: holeId,\n                                pinId: pinId,\n                                markerId: markerId,\n                                desiredYardage: desiredYardage\n                            })\n                        }\n                    });\n                });\n            });\n        });\n\n        return (<div>\n            <div>Par <SelectAPI value={this.state.parFilter} options={parOptions} handleChange={this.handleParFilterChange}></SelectAPI></div>\n            <div>Yardage Inputs {desiredYardageInputs}</div>\n            <div>\n                <h3>Possibilities Table</h3>\n                <DesiredYardageCountTable holeIds={holeIds} desiredYardages={this.state.desiredYardages} yardageCalcArr={yardageCalcArr} ></DesiredYardageCountTable>\n            </div>\n            <div>\n                <h3>Combinations Table</h3>\n                <div>{'Yardage + Pin Depth + Marker Adjustment = Desired Yardage'}</div>\n                <br></br>\n                <CombinationTable holeIds={holeIds} desiredYardages={this.state.desiredYardages} yardageCalcArr={yardageCalcArr} ></CombinationTable>\n            </div>\n\n        </div>);\n    }\n\n    public handleDesiredYardageChange(index: number, newVal: number) {\n        const cloned = this.cloneNumberArray(this.state.desiredYardages);\n        cloned[index] = newVal;\n        this.setState({ desiredYardages: cloned })\n    }\n\n    public cloneNumberArray(arr: number[]) {\n        const cloned: number[] = [];\n        arr.forEach(val => cloned.push(val));\n        return cloned;\n    }\n    public handleParFilterChange(newVal: string) {\n        // set default desired yardage\n        const holeIds = DataService.getAllHoleIds(newVal);\n        const newPar = parseInt(newVal);\n        let beginVal = 0;\n        switch (newPar) {\n            case 3:\n                beginVal = defaultParToBeginingYardage[3];\n                break;\n            case 4:\n                beginVal = defaultParToBeginingYardage[4];\n                break;\n            case 5:\n                beginVal = defaultParToBeginingYardage[5]\n                break;\n            default:\n                break;\n        }\n        const yardageChange = 20;\n        const createdDesireYardages: number[] = [];\n        for (let i = 0; i < holeIds.length; i++) {\n            createdDesireYardages.push(beginVal + (i * yardageChange));\n        }\n        this.setState({ desiredYardages: createdDesireYardages });\n        this.setState({ parFilter: newVal });\n    }\n\n}\n\nexport default FinalAnalysisTable;\n","import React, { Component } from 'react';\nimport PinDepthTable from '../PinDepthTable/PinDepthTable';\nimport MarkerDepthTable from '../MarkerDepthTable/MarkerDepthTable';\nimport HoleYardageTable from '../HoleYardageTable/HoleYardageTable';\nimport CourseAnalysisTable from '../CourseAnalysisTable/CourseAnalysisTable';\nimport FinalAnalysisTable from '../FinalAnalysisTable/FinalAnalysisTable';\n\nclass Main extends Component<any, { pinLocationId: number, overviewPinDepthSum: number }> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      pinLocationId: 1,\n      overviewPinDepthSum: 0\n    }\n    this.handlePinLocationIdChange = this.handlePinLocationIdChange.bind(this);\n    this.handleAnyInputChange = this.handleAnyInputChange.bind(this);\n  }\n\n  public render() {\n    return (<div>\n      <div>\n        <h1>Data Overview</h1>\n        <h3>Pin Depths</h3>\n        <PinDepthTable></PinDepthTable>\n        <h3>Teebox Depths</h3>\n        <div>{'(Teebox depth / 2) - 1'}</div>\n        <br></br>\n        <MarkerDepthTable></MarkerDepthTable>\n        <h3>Hole Yardages</h3>\n        <HoleYardageTable></HoleYardageTable>\n        <h3>Course Analysis</h3>\n        <div>{'Yardage + Pin Depth \\xB1 Marker Depth'}</div>\n        <br></br>\n        <CourseAnalysisTable></CourseAnalysisTable>\n        <h1>Final Analysis</h1>\n        <FinalAnalysisTable></FinalAnalysisTable>\n      </div>\n      <br></br>\n      <br></br>\n\n    </div>);\n  }\n\n  public handlePinLocationIdChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const val = parseInt(event.target.value);\n    this.setState({ pinLocationId: val });\n    this.handleAnyInputChange();\n  }\n\n\n  public handleAnyInputChange() {\n    // do calculations\n    // overview calculations\n\n  }\n}\n\nexport default Main;\n","import React from 'react';\n\nimport './App.css';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}