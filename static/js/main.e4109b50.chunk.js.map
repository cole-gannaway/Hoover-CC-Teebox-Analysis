{"version":3,"sources":["services/data-service.ts","components/MaterialTable/MaterialTable.tsx","components/SelectAPI/SelectAPI.tsx","components/PinDepthTable/PinDepthTable.tsx","services/yardage-utils.ts","components/MarkerDepthTable/MarkerDepthTable.tsx","components/HoleYardageTable/HoleYardageTable.tsx","components/CourseAnalysisTable/CourseAnalysisTable.tsx","components/DynamicInput/DynamicInput.tsx","services/calculation-utils.ts","components/FinalAnalysisTable/DesiredYardageCountTable/DesiredYardageCountTable.tsx","components/FinalAnalysisTable/CombinationTable/CombinationTable.tsx","components/FinalAnalysisTable/FinalAnalysisTable.tsx","components/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataService","data","holes","filter","hole","markers","map","id","parFilter","par","toString","allIds","forEach","pinLocations","pinLocation","includes","push","holeId","pinId","retVal","foundHole","find","foundPinLocationInfo","console","log","markerId","foundMarkerInfo","marker","MaterialTable","this","props","headerRowDataHTML","val","i","TableCell","key","dataRowsHTML","slice","length","dataRow","dataRowHTML","j","TableRow","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableBody","Component","SelectAPI","handleChange","bind","optionsHTML","options","option","value","onChange","event","target","PinDepthTable","state","handleParFilterChange","holeIds","getAllHoleIds","pinLocationIds","getAllPinLocationIds","headerRow","dataRows","rowSum","pinInfo","getPinInfoForHole","cellVal","depth","finalData","row","newVal","setState","YardageUtils","total","Math","floor","MarkerDepthTable","markerIds","getAllMarkerIds","depthSum","deltaSum","markerInfo","getMarkerInfoForHole","delta","computePlusMinus","HoleYardageTable","yardageSum","yardage","CourseAnalysisTable","markerFilter","handleMarkerFilterChange","pinIds","parseInt","maxSum","minSum","pinDepth","markerDepth","markerDepthDelta","highTotal","lowTotal","markerIdsAsStr","DynamicInput","type","index","CalculationUtils","desiredYardage","constantYardage","markerDelta","desiredYardageDelta","abs","desiredYardages","yardageCalcArr","combos","recursiveFunction","combo","possibleValues","filtered","filterPossibleValues","lastElement","pop","cloneCombo","comboHoleIds","comboDesiredYardages","comboPinId","findIndex","dy","cloned","DesiredYardageCountTable","count","numOfMatches","countData","CombinationTable","handleClick","findAllCombos","found","markerAdjustment","style","overflow","height","onClick","parOptions","defaultParToBeginingYardage","FinalAnalysisTable","handleDesiredYardageChange","cloneNumberArray","desiredYardageInputs","canCombinationProduceDesiredYardage","arr","beginVal","createdDesireYardages","Main","pinLocationId","overviewPinDepthSum","handlePinLocationIdChange","handleAnyInputChange","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e4109b50.chunk.js","sourcesContent":["import data from \"../resources/data.json\";\n\nexport class DataService {\n  public static getAllData() {\n    return data;\n  }\n  /* This will disappear when all data is present */\n  public static getAllHoleIdsWithMarkers() {\n    const fitleredHoles = data.holes.filter((hole) => {\n      if (hole.markers) return true;\n      else return false;\n    });\n    const holeIds = fitleredHoles.map((hole) => {\n      return hole.id;\n    });\n    return holeIds;\n  }\n  public static getAllHoleIds(parFilter: string | null) {\n    // apply filters\n    let fitleredHoles = data.holes;\n    if (parFilter) {\n      fitleredHoles = data.holes.filter(\n        (hole) => hole.par.toString() === parFilter\n      );\n    } else {\n      fitleredHoles = data.holes;\n    }\n\n    const holeIds = fitleredHoles.map((hole) => {\n      return hole.id;\n    });\n    return holeIds;\n  }\n  public static getAllPinLocationIds() {\n    const allIds: number[] = [];\n    data.holes.forEach((hole) => {\n      const pinLocationIdsForHole = hole.pinLocations.map((pinLocation) => {\n        return pinLocation.id;\n      });\n      // add all new ids\n      pinLocationIdsForHole.forEach((id) => {\n        if (!allIds.includes(id)) {\n          allIds.push(id);\n        }\n      });\n    });\n    return allIds;\n  }\n  public static getPinInfoForHole(holeId: number, pinId: number) {\n    let retVal = null;\n    const foundHole = data.holes.find((hole) => hole.id === holeId);\n    if (foundHole) {\n      const foundPinLocationInfo = foundHole.pinLocations.find(\n        (pinLocation) => pinLocation.id === pinId\n      );\n      if (foundPinLocationInfo) {\n        retVal = foundPinLocationInfo;\n      } else {\n        console.log(\n          \"Could not find pin location \" + pinId + \" at hole \" + holeId + \".\"\n        );\n      }\n    } else {\n      console.log(\"Could not find hole \" + holeId + \".\");\n    }\n    return retVal;\n  }\n  public static getAllMarkerIds() {\n    const allIds: number[] = [];\n    data.holes.forEach((hole) => {\n      if (hole.markers) {\n        const pinLocationIdsForHole = hole.markers.map((pinLocation) => {\n          return pinLocation.id;\n        });\n        // add all new ids\n        pinLocationIdsForHole.forEach((id) => {\n          if (!allIds.includes(id)) {\n            allIds.push(id);\n          }\n        });\n      }\n    });\n    return allIds;\n  }\n  public static getMarkerInfoForHole(holeId: number, markerId: number) {\n    let retVal = null;\n    const foundHole = data.holes.find((hole) => hole.id === holeId);\n    if (foundHole) {\n      if (foundHole.markers) {\n        const foundMarkerInfo = foundHole.markers.find(\n          (marker) => marker.id === markerId\n        );\n        if (foundMarkerInfo) {\n          retVal = foundMarkerInfo;\n        } else {\n          console.log(\n            \"Could not find marker \" + markerId + \" at hole \" + holeId + \".\"\n          );\n        }\n      }\n    } else {\n      console.log(\"Could not find hole \" + holeId + \".\");\n    }\n    return retVal;\n  }\n}\n","import React, { Component } from 'react';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nclass MaterialTable extends Component<{ data: string[][] }, {}> {\n\n    public render() {\n        const data = this.props.data;\n        const headerRow = data[0];\n        const headerRowDataHTML = headerRow.map((val: string, i: number) => {\n            return <TableCell key={'headerCell: ' + i}>{val}</TableCell>;\n        });\n        const dataRows = data.slice(1, data.length);\n        const dataRowsHTML = dataRows.map((dataRow: string[], i) => {\n            const dataRowHTML = dataRow.map((val, j: number) => {\n                return <TableCell key={'dataCell: ' + i + ',' + j + ''}>{val}</TableCell>;\n            });\n            return <TableRow key={'dataRow: ' + i}>{dataRowHTML}</TableRow>;\n        });\n\n\n        return (\n            <TableContainer component={Paper}>\n                <Table size=\"small\" aria-label=\"a dense table\">\n                    <TableHead>\n                        <TableRow>{headerRowDataHTML}</TableRow>\n                    </TableHead>\n                    <TableBody>{dataRowsHTML}</TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n}\n\nexport default MaterialTable;\n","import React, { Component } from 'react';\nclass SelectAPI extends Component<{ options: string[], value: string, handleChange(val: string): void }, {}> {\n    constructor(props: any) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    public render() {\n        const optionsHTML = this.props.options.map((option, i) => {\n            return <option key={'option: ' + i}>{option}</option>\n        })\n        return <div>\n            <select value={this.props.value} onChange={this.handleChange}>\n                {optionsHTML}\n            </select>\n        </div>\n    }\n\n    public handleChange(event: React.ChangeEvent<HTMLSelectElement>) {\n        this.props.handleChange(event.target.value);\n    }\n}\n\nexport default SelectAPI;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport MaterialTable from '../MaterialTable/MaterialTable';\nimport SelectAPI from '../SelectAPI/SelectAPI';\n\nconst options = ['Any', '3', '4', '5'];\nclass PinDepthTable extends Component<{}, { parFilter: string }> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      parFilter: '3'\n    }\n    this.handleParFilterChange = this.handleParFilterChange.bind(this);\n  }\n\n  public render() {\n    let holeIds: number[] = [];\n    if (this.state.parFilter === 'Any') {\n      holeIds = DataService.getAllHoleIds(null);\n    } else {\n      holeIds = DataService.getAllHoleIds(this.state.parFilter);\n    }\n    const pinLocationIds = DataService.getAllPinLocationIds();\n\n    // construct header row\n    const headerRow: string[] = [];\n    headerRow.push('Pin Location Id');\n    holeIds.forEach((holeId) => {\n      headerRow.push('Hole #' + holeId.toString());\n    });\n    headerRow.push('Total');\n\n    // construct data rows\n    const dataRows = pinLocationIds.map((pinId) => {\n      // construct data row\n      const dataRow: string[] = [];\n      dataRow.push(pinId.toString());\n      let rowSum = 0;\n      holeIds.forEach((holeId) => {\n        const pinInfo = DataService.getPinInfoForHole(holeId, pinId);\n        // default\n        let cellVal = '-';\n        if (pinInfo) {\n          rowSum += pinInfo.depth;\n          cellVal = pinInfo.depth.toString();\n        }\n        dataRow.push(cellVal);\n      });\n      dataRow.push(rowSum.toString());\n      return dataRow;\n    });\n\n\n    const finalData: string[][] = [];\n    finalData.push(headerRow);\n    dataRows.forEach((row) => finalData.push(row));\n\n    return (<div>\n      <div>\n        Par\n        <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n      </div>\n      <MaterialTable data={finalData}></MaterialTable>\n    </div>);\n  }\n  public handleParFilterChange(newVal: string) {\n    this.setState({ parFilter: newVal });\n  }\n}\n\nexport default PinDepthTable;\n","export class YardageUtils {\n  public static computePlusMinus(total: number) {\n    return Math.floor(total / 2) - 1;\n  }\n}\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport MaterialTable from '../MaterialTable/MaterialTable';\nimport SelectAPI from '../SelectAPI/SelectAPI';\nimport { YardageUtils } from '../../services/yardage-utils';\n\nconst options = ['Any', '3', '4', '5'];\nclass MarkerDepthTable extends Component<{}, { parFilter: string }> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            parFilter: '3'\n        }\n        this.handleParFilterChange = this.handleParFilterChange.bind(this);\n    }\n    public render() {\n        let holeIds: number[] = [];\n        if (this.state.parFilter === 'Any') {\n            holeIds = DataService.getAllHoleIds(null);\n        } else {\n            holeIds = DataService.getAllHoleIds(this.state.parFilter);\n        }\n        const markerIds = DataService.getAllMarkerIds();\n\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Marker Id');\n        holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n        headerRow.push('Total');\n\n        // construct data rows\n        const dataRows = markerIds.map((markerId) => {\n            // construct data row\n            const dataRow: string[] = [];\n            dataRow.push(markerId.toString());\n            let depthSum = 0;\n            let deltaSum = 0;\n            holeIds.forEach((holeId) => {\n                const markerInfo = DataService.getMarkerInfoForHole(holeId, markerId);\n                // default\n                let cellVal = '-';\n                if (markerInfo) {\n                    const depth = markerInfo.depth;\n                    const delta = YardageUtils.computePlusMinus(depth);\n                    depthSum += depth;\n                    deltaSum += delta;\n                    cellVal = '(' + depth.toString() + ' / 2) - 1 => \\xB1 ' + delta.toString();\n                }\n                dataRow.push(cellVal);\n            });\n            dataRow.push(depthSum.toString() + ' => \\xB1 ' + deltaSum.toString());\n            return dataRow;\n        });\n\n\n        const finalData: string[][] = [];\n        finalData.push(headerRow);\n        dataRows.forEach((row) => finalData.push(row));\n\n        return (<div>\n            <div>\n                Par <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n            </div>\n            <MaterialTable data={finalData}></MaterialTable>\n        </div>);\n    }\n    public handleParFilterChange(newVal: string) {\n        this.setState({ parFilter: newVal });\n    }\n}\n\nexport default MarkerDepthTable;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport MaterialTable from '../MaterialTable/MaterialTable';\nimport SelectAPI from '../SelectAPI/SelectAPI';\n\nconst options = ['Any', '3', '4', '5'];\nclass HoleYardageTable extends Component<{}, { parFilter: string }> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      parFilter: '3'\n    }\n    this.handleParFilterChange = this.handleParFilterChange.bind(this);\n  }\n\n  public render() {\n    let holeIds: number[] = [];\n    if (this.state.parFilter === 'Any') {\n      holeIds = DataService.getAllHoleIds(null);\n    } else {\n      holeIds = DataService.getAllHoleIds(this.state.parFilter);\n    }\n    const markerIds = DataService.getAllMarkerIds();\n\n    // construct header row\n    const headerRow: string[] = [];\n    headerRow.push('Marker Id');\n    holeIds.forEach((holeId) => {\n      headerRow.push('Hole #' + holeId.toString());\n    });\n    headerRow.push('Total');\n\n    // construct data rows\n    const dataRows = markerIds.map((markerId) => {\n      // construct data row\n      const dataRow: string[] = [];\n      dataRow.push(markerId.toString());\n      let yardageSum = 0;\n      holeIds.forEach((holeId) => {\n        const markerInfo = DataService.getMarkerInfoForHole(holeId, markerId);\n        // default\n        let cellVal = '-';\n        if (markerInfo) {\n          const yardage = markerInfo.yardage;\n          yardageSum += yardage;\n          cellVal = yardage.toString();\n        }\n        dataRow.push(cellVal);\n      });\n      dataRow.push(yardageSum.toString());\n      return dataRow;\n    });\n\n\n\n    const finalData: string[][] = [];\n    finalData.push(headerRow);\n    dataRows.forEach((row) => finalData.push(row));\n\n    return (<div>\n      <div>\n        Par\n        <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n      </div>\n      <MaterialTable data={finalData}></MaterialTable>\n    </div>);\n  }\n  public handleParFilterChange(newVal: string) {\n    this.setState({ parFilter: newVal });\n  }\n}\n\nexport default HoleYardageTable;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport MaterialTable from '../MaterialTable/MaterialTable';\nimport SelectAPI from '../SelectAPI/SelectAPI';\nimport { YardageUtils } from '../../services/yardage-utils';\n\nconst options = ['Any', '3', '4', '5'];\nclass CourseAnalysisTable extends Component<{}, { parFilter: string, markerFilter: string }> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            parFilter: '3',\n            markerFilter: '1'\n        }\n        this.handleParFilterChange = this.handleParFilterChange.bind(this);\n        this.handleMarkerFilterChange = this.handleMarkerFilterChange.bind(this);\n    }\n    public render() {\n        let holeIds: number[] = [];\n        if (this.state.parFilter === 'Any') {\n            holeIds = DataService.getAllHoleIds(null);\n        } else {\n            holeIds = DataService.getAllHoleIds(this.state.parFilter);\n        }\n        const markerIds = DataService.getAllMarkerIds();\n        const pinIds = DataService.getAllPinLocationIds();\n\n        const markerId = parseInt(this.state.markerFilter);\n\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Pin Location Id');\n        holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n        headerRow.push('Total');\n\n        // construct data rows\n        const dataRows = pinIds.map((pinId) => {\n            // construct data row\n            const dataRow: string[] = [];\n            dataRow.push(pinId.toString());\n            let maxSum = 0;\n            let minSum = 0;\n            holeIds.forEach((holeId) => {\n                const markerInfo = DataService.getMarkerInfoForHole(holeId, markerId);\n                const pinInfo = DataService.getPinInfoForHole(holeId, pinId);\n                // default\n                let cellVal = '-';\n                if (markerInfo && pinInfo) {\n                    const yardage = markerInfo.yardage;\n                    const pinDepth = pinInfo.depth;\n                    const markerDepth = markerInfo.depth;\n                    const markerDepthDelta = YardageUtils.computePlusMinus(markerDepth);\n                    // max\n                    const highTotal = yardage + pinDepth + markerDepthDelta;\n                    maxSum += highTotal;\n                    // min\n                    const lowTotal = yardage + pinDepth - markerDepthDelta;\n                    minSum += lowTotal;\n                    cellVal = yardage.toString() + ' + ' + pinDepth.toString() + ' \\xB1  ' + markerDepthDelta.toString() + ' = ( ' + lowTotal.toString() + ', ' + highTotal.toString() + ' )';\n                }\n                dataRow.push(cellVal);\n            });\n            dataRow.push('( ' + minSum.toString() + ', ' + maxSum.toString() + ' )');\n            return dataRow;\n        });\n\n        const finalData: string[][] = [];\n        finalData.push(headerRow);\n        dataRows.forEach((row) => finalData.push(row));\n\n        const markerIdsAsStr = markerIds.map((id) => id.toString());\n        return (<div>\n            <div>\n                Par <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n                Marker <SelectAPI value={this.state.markerFilter} options={markerIdsAsStr} handleChange={this.handleMarkerFilterChange}></SelectAPI>\n            </div>\n            <MaterialTable data={finalData}></MaterialTable>\n        </div>);\n    }\n    public handleParFilterChange(newVal: string) {\n        this.setState({ parFilter: newVal });\n    }\n\n    public handleMarkerFilterChange(newVal: string) {\n        this.setState({ markerFilter: newVal });\n    }\n\n}\n\nexport default CourseAnalysisTable;\n","import React, { Component } from 'react';\n\ntype DynamicInputProps = {\n    //\n    value: number,\n    index: number\n    handleChange(i: number, value: number): void\n};\n\nclass DynamicInput extends Component<DynamicInputProps, any> {\n    constructor(props: DynamicInputProps) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    public render() {\n\n        return <div>\n            <input type=\"text\" value={this.props.value} onChange={this.handleChange} ></input>\n        </div>;\n    }\n    public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        const newVal = parseInt(event.target.value);\n        if (newVal) {\n            this.props.handleChange(this.props.index, newVal);\n        } else {\n            this.props.handleChange(this.props.index, 0);\n        }\n    }\n}\n\nexport default DynamicInput;\n","import { DataService } from \"./data-service\";\nimport { YardageUtils } from \"./yardage-utils\";\nimport { IYardageCalc } from \"../interfaces/IYardageCalc\";\n\nexport class CalculationUtils {\n  public static canCombinationProduceDesiredYardage(\n    holeId: number,\n    pinId: number,\n    markerId: number,\n    desiredYardage: number\n  ) {\n    let retVal = false;\n    // get pinInfo for the hole\n    const pinInfo = DataService.getPinInfoForHole(holeId, pinId);\n    // if markerInfo can get the desiredYardage then add it\n    const markerInfo = DataService.getMarkerInfoForHole(holeId, markerId);\n    if (pinInfo && markerInfo) {\n      // constants\n      const yardage = markerInfo.yardage;\n      const pinDepth = pinInfo.depth;\n      const constantYardage = yardage + pinDepth;\n      const markerDelta = YardageUtils.computePlusMinus(markerInfo.depth);\n      const desiredYardageDelta = constantYardage - desiredYardage;\n      const absDesiredYardageDelta = Math.abs(desiredYardageDelta);\n      // this hole, pin, and marker combination can be used for this desired yardage\n      if (absDesiredYardageDelta < markerDelta) retVal = true;\n    }\n\n    return retVal;\n  }\n  public static findAllCombos(\n    holeIds: number[],\n    desiredYardages: number[],\n    yardageCalcArr: IYardageCalc[]\n  ): IYardageCalc[][] {\n    const combos: IYardageCalc[][] = [];\n    let combo: IYardageCalc[] = [];\n    this.recursiveFunction(\n      combo,\n      combos,\n      holeIds,\n      desiredYardages,\n      yardageCalcArr\n    );\n    return combos;\n  }\n  private static recursiveFunction(\n    combo: IYardageCalc[],\n    combos: IYardageCalc[][],\n    holeIds: number[],\n    desiredYardages: number[],\n    possibleValues: IYardageCalc[]\n  ) {\n    // success base case\n    if (combo.length === desiredYardages.length) {\n      combos.push(this.cloneCombo(combo));\n      return;\n    }\n    // failure base case\n    if (possibleValues.length === 0) {\n      return;\n    }\n    // filter out\n    const filtered: IYardageCalc[] = this.filterPossibleValues(\n      possibleValues,\n      combo\n    );\n    while (filtered.length !== 0) {\n      const lastElement = filtered.pop();\n      if (lastElement) {\n        // add to combo\n        combo.push(lastElement);\n        // recurse\n        this.recursiveFunction(\n          combo,\n          combos,\n          holeIds,\n          desiredYardages,\n          filtered\n        );\n        // remove from combo\n        combo.pop();\n      }\n    }\n  }\n  public static filterPossibleValues(\n    possibleValues: IYardageCalc[],\n    combo: IYardageCalc[]\n  ): IYardageCalc[] {\n    const comboHoleIds = combo.map((val) => val.holeId);\n    const comboDesiredYardages = combo.map((val) => val.desiredYardage);\n    let comboPinId: number | null = null;\n    if (combo.length > 1) {\n      comboPinId = combo[0].pinId;\n    }\n    const filtered = possibleValues\n      .filter((val) => {\n        return comboHoleIds.findIndex((holeId) => val.holeId === holeId) === -1;\n      })\n      .filter((val) => {\n        return (\n          comboDesiredYardages.findIndex((dy) => val.desiredYardage === dy) ===\n          -1\n        );\n      })\n      .filter((val) => {\n        if (comboPinId) return val.pinId === comboPinId;\n        else return true;\n      });\n    return filtered;\n  }\n\n  private static cloneCombo(combo: IYardageCalc[]) {\n    const cloned: IYardageCalc[] = [];\n    combo.forEach((val) => cloned.push(val));\n    return cloned;\n  }\n}\n","import React, { Component } from 'react';\nimport { IYardageCalc } from '../../../interfaces/IYardageCalc';\nimport MaterialTable from '../../MaterialTable/MaterialTable';\n\n\n\n\nclass DesiredYardageCountTable extends Component<{ holeIds: number[], desiredYardages: number[], yardageCalcArr: IYardageCalc[] }, {}> {\n\n    public render() {\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Yardage');\n        this.props.holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n        headerRow.push('Total');\n\n        // construct data rows\n        const dataRows = this.props.desiredYardages.map((desiredYardage) => {\n            // construct data row\n            const dataRow: string[] = [];\n            dataRow.push(desiredYardage.toString());\n            let count = 0;\n            this.props.holeIds.forEach((holeId) => {\n                // default\n                const filtered = this.props.yardageCalcArr.filter((val) => val.holeId === holeId && val.desiredYardage === desiredYardage);\n                let numOfMatches = filtered.length;\n                dataRow.push(numOfMatches.toString());\n                count += numOfMatches;\n            });\n            dataRow.push(count.toString());\n            return dataRow;\n        });\n\n        const countData: string[][] = [];\n        countData.push(headerRow);\n        dataRows.forEach((row) => countData.push(row));\n\n        return (<div>\n            <MaterialTable data={countData}></MaterialTable>\n        </div>);\n    }\n\n}\n\nexport default DesiredYardageCountTable;\n","import React, { Component } from 'react';\nimport { IYardageCalc } from '../../../interfaces/IYardageCalc';\nimport MaterialTable from '../../MaterialTable/MaterialTable';\nimport { CalculationUtils } from '../../../services/calculation-utils';\nimport { DataService } from '../../../services/data-service';\n\nclass CombinationTable extends Component<{ holeIds: number[], desiredYardages: number[], yardageCalcArr: IYardageCalc[] }, {}> {\n\n    constructor(props: any) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    public render() {\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Combination');\n        this.props.holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n\n        // compute combinations\n        const combos = CalculationUtils.findAllCombos(this.props.holeIds, this.props.desiredYardages, this.props.yardageCalcArr);\n        // construct data rows\n        const dataRows = combos.map((combo, index) => {\n            // construct data row\n            const dataRow: string[] = [];\n            dataRow.push((index + 1).toString() + ' => Pin# ' + combo[0].pinId);\n            this.props.holeIds.forEach((holeId) => {\n                // default\n                let cellVal = '-';\n                const found = combo.find((val) => val.holeId === holeId);\n                if (found) {\n                    // show calculations\n                    const pinInfo = DataService.getPinInfoForHole(found.holeId, found.pinId);\n                    const markerInfo = DataService.getMarkerInfoForHole(found.holeId, found.markerId);\n                    if (pinInfo && markerInfo) {\n                        // constants\n                        const yardage = markerInfo.yardage;\n                        const pinDepth = pinInfo.depth;\n                        const constantYardage = yardage + pinDepth;\n                        const markerAdjustment = found.desiredYardage - constantYardage;\n\n                        cellVal = yardage.toString() + ' + ' + pinDepth.toString() + ' + ' + markerAdjustment.toString() + ' = ' + found.desiredYardage.toString() + ' => Marker# ' + markerInfo.id;\n                    }\n\n                }\n                dataRow.push(cellVal);\n            });\n            return dataRow;\n        });\n\n        const countData: string[][] = [];\n        countData.push(headerRow);\n        dataRows.forEach((row) => countData.push(row));\n\n        return (<div>\n            <div style={{ overflow: \"auto\", height: \"600px\" }}>\n                <MaterialTable data={countData}></MaterialTable>\n            </div>\n            <button onClick={this.handleClick}>Click Me!</button>\n        </div>);\n    }\n    handleClick() {\n\n    }\n\n}\n\nexport default CombinationTable;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport SelectAPI from '../SelectAPI/SelectAPI';\nimport DynamicInput from '../DynamicInput/DynamicInput';\nimport { CalculationUtils } from '../../services/calculation-utils';\nimport { IYardageCalc } from '../../interfaces/IYardageCalc';\nimport DesiredYardageCountTable from './DesiredYardageCountTable/DesiredYardageCountTable';\nimport CombinationTable from './CombinationTable/CombinationTable';\n\n\nconst parOptions = ['3', '4', '5'];\nconst defaultParToBeginingYardage = {\n    3: 120,\n    4: 280,\n    5: 400,\n}\n\n\n\nclass FinalAnalysisTable extends Component<{}, { parFilter: string, desiredYardages: number[] }> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            parFilter: '3',\n            desiredYardages: [120, 140, 160, 180, 200]\n        }\n        this.handleParFilterChange = this.handleParFilterChange.bind(this);\n        this.handleDesiredYardageChange = this.handleDesiredYardageChange.bind(this);\n\n        this.cloneNumberArray = this.cloneNumberArray.bind(this);\n    }\n    public render() {\n        let holeIds: number[] = [];\n        holeIds = DataService.getAllHoleIds(this.state.parFilter);\n        const markerIds = DataService.getAllMarkerIds();\n        const pinIds = DataService.getAllPinLocationIds();\n\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Options');\n        holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n        headerRow.push('Total');\n\n        const desiredYardageInputs = this.state.desiredYardages.map((desiredYardage, i) => {\n            return <DynamicInput key={'possbileVal' + i} value={desiredYardage} index={i} handleChange={this.handleDesiredYardageChange}></DynamicInput>;\n        })\n        const yardageCalcArr: IYardageCalc[] = [];\n        holeIds.forEach((holeId) => {\n            pinIds.forEach((pinId) => {\n                markerIds.forEach(markerId => {\n                    this.state.desiredYardages.forEach((desiredYardage) => {\n                        if (CalculationUtils.canCombinationProduceDesiredYardage(holeId, pinId, markerId, desiredYardage)) {\n                            yardageCalcArr.push({\n                                holeId: holeId,\n                                pinId: pinId,\n                                markerId: markerId,\n                                desiredYardage: desiredYardage\n                            })\n                        }\n                    });\n                });\n            });\n        });\n\n        return (<div>\n            <div>Par <SelectAPI value={this.state.parFilter} options={parOptions} handleChange={this.handleParFilterChange}></SelectAPI></div>\n            <div>Yardage Inputs {desiredYardageInputs}</div>\n            <div>\n                <h3>Possibilities Table</h3>\n                <DesiredYardageCountTable holeIds={holeIds} desiredYardages={this.state.desiredYardages} yardageCalcArr={yardageCalcArr} ></DesiredYardageCountTable>\n            </div>\n            <div>\n                <h3>Combinations Table</h3>\n                <div>{'Yardage + Pin Depth + Marker Adjustment = Desired Yardage'}</div>\n                <br></br>\n                <CombinationTable holeIds={holeIds} desiredYardages={this.state.desiredYardages} yardageCalcArr={yardageCalcArr} ></CombinationTable>\n            </div>\n\n        </div>);\n    }\n\n    public handleDesiredYardageChange(index: number, newVal: number) {\n        const cloned = this.cloneNumberArray(this.state.desiredYardages);\n        cloned[index] = newVal;\n        this.setState({ desiredYardages: cloned })\n    }\n\n    public cloneNumberArray(arr: number[]) {\n        const cloned: number[] = [];\n        arr.forEach(val => cloned.push(val));\n        return cloned;\n    }\n    public handleParFilterChange(newVal: string) {\n        // set default desired yardage\n        const holeIds = DataService.getAllHoleIds(newVal);\n        const newPar = parseInt(newVal);\n        let beginVal = 0;\n        switch (newPar) {\n            case 3:\n                beginVal = defaultParToBeginingYardage[3];\n                break;\n            case 4:\n                beginVal = defaultParToBeginingYardage[4];\n                break;\n            case 5:\n                beginVal = defaultParToBeginingYardage[5]\n                break;\n            default:\n                break;\n        }\n        const yardageChange = 20;\n        const createdDesireYardages: number[] = [];\n        for (let i = 0; i < holeIds.length; i++) {\n            createdDesireYardages.push(beginVal + (i * yardageChange));\n        }\n        this.setState({ desiredYardages: createdDesireYardages });\n        this.setState({ parFilter: newVal });\n    }\n\n}\n\nexport default FinalAnalysisTable;\n","import React, { Component } from 'react';\nimport PinDepthTable from '../PinDepthTable/PinDepthTable';\nimport MarkerDepthTable from '../MarkerDepthTable/MarkerDepthTable';\nimport HoleYardageTable from '../HoleYardageTable/HoleYardageTable';\nimport CourseAnalysisTable from '../CourseAnalysisTable/CourseAnalysisTable';\nimport FinalAnalysisTable from '../FinalAnalysisTable/FinalAnalysisTable';\n\nclass Main extends Component<any, { pinLocationId: number, overviewPinDepthSum: number }> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      pinLocationId: 1,\n      overviewPinDepthSum: 0\n    }\n    this.handlePinLocationIdChange = this.handlePinLocationIdChange.bind(this);\n    this.handleAnyInputChange = this.handleAnyInputChange.bind(this);\n  }\n\n  public render() {\n    return (<div>\n      <div>\n        <h1>Data Overview</h1>\n        <h3>Pin Depths</h3>\n        <PinDepthTable></PinDepthTable>\n        <h3>Teebox Depths</h3>\n        <div>{'(Teebox depth / 2) - 1'}</div>\n        <br></br>\n        <MarkerDepthTable></MarkerDepthTable>\n        <h3>Hole Yardages</h3>\n        <HoleYardageTable></HoleYardageTable>\n        <h3>Course Analysis</h3>\n        <div>{'Yardage + Pin Depth \\xB1 Marker Depth'}</div>\n        <br></br>\n        <CourseAnalysisTable></CourseAnalysisTable>\n        <h1>Final Analysis</h1>\n        <FinalAnalysisTable></FinalAnalysisTable>\n      </div>\n      <br></br>\n      <br></br>\n\n    </div>);\n  }\n\n  public handlePinLocationIdChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const val = parseInt(event.target.value);\n    this.setState({ pinLocationId: val });\n    this.handleAnyInputChange();\n  }\n\n\n  public handleAnyInputChange() {\n    // do calculations\n    // overview calculations\n\n  }\n}\n\nexport default Main;\n","import React from 'react';\n\nimport './App.css';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}