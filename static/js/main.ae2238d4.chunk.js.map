{"version":3,"sources":["components/DataTableApi/DataTableApi.tsx","components/SelectAPI/SelectAPI.tsx","components/PinDepthTable/PinDepthTable.tsx","services/yardage-utils.ts","components/MarkerDepthTable/MarkerDepthTable.tsx","components/HoleYardageTable/HoleYardageTable.tsx","components/CourseAnalysisTable/CourseAnalysisTable.tsx","components/DynamicInputRange/DynamicInputRange.tsx","services/calculation-utils.ts","components/FinalAnalysisTable/DesiredYardageCountTable/DesiredYardageCountTable.tsx","components/FinalAnalysisTable/CombinationTable/CombinationTable.tsx","components/FinalAnalysisTable/FinalAnalysisTable.tsx","components/SlopeTable/SlopeTable.tsx","services/data-service.ts","components/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DataTableApi","columns","this","props","data","map","header","index","name","selector","toString","wrap","minWidth","slice","length","row","flatMappedData","forEach","val","key","noHeader","fixedHeaderScrollHeight","Component","SelectAPI","handleChange","bind","optionsHTML","options","option","i","value","onChange","event","target","PinDepthTable","state","parFilter","handleParFilterChange","holeIds","dataService","getAllHoleIds","pinLocationIds","getAllPinLocationIds","headerRow","push","holeId","dataRows","pinId","dataRow","rowSum","pinInfo","getPinInfoForHole","cellVal","depth","finalData","newVal","setState","YardageUtils","total","Math","floor","MarkerDepthTable","teeBoxIds","getAllTeeboxIds","markerId","depthSum","deltaSum","markerInfo","getTeeboxInfoForHole","delta","computePlusMinus","HoleYardageTable","yardageSum","yardage","CourseAnalysisTable","teeBoxFilter","handleTeeBoxFilterChange","pinIds","teeBoxId","parseInt","maxSum","minSum","teeBoxInfo","pinDepth","markerDepth","slope","markerDepthDelta","highTotal","lowTotal","teeBoxIdsAsStr","id","DynamicInputRange","type","min","max","CalculationUtils","desiredYardage","retVal","constantYardage","markerDelta","desiredYardageDelta","abs","desiredYardages","mixAndMatchPinIdsAllowed","yardageCalcArr","combos","recursiveFunction","combo","possibleValues","filtered","filterPossibleValues","lastElement","pop","cloneCombo","comboHoleIds","comboDesiredYardages","comboPinId","filter","findIndex","dy","cloned","DesiredYardageCountTable","count","numOfMatches","countData","CombinationTable","handleClick","findAllCombos","sort","a","b","found","find","markerAdjustment","parOptions","defaultParToBeginingYardage","FinalAnalysisTable","adjustablePinLocations","handleDesiredYardageChange","handleAdjustablePinChange","handleMixAndMatchPinIdsAllowedChange","cloneNumberArray","desiredYardageInputs","adjustablePin","canCombinationProduceDesiredYardage","checked","cloneAdjustablePinLocations","previousInfo","setAdjustablePinDepths","reRender","arr","beginVal","createdDesireYardages","createdAdjustablePinLocations","SlopeTable","slopeSum","DataService","course","testData","adjustablePinDepths","adjustablePinId","holes","hole","par","allIds","pinLocations","pinLocation","includes","foundHole","foundPinLocationInfo","console","log","foundAdjustableInfo","teeboxes","teebox","foundTeeBoxInfo","teeBox","Main","createdDataService","pinLocationId","overviewPinDepthSum","handlePinLocationIdChange","handleUploadFileChange","setDataServiceToNewFile","accept","href","reader","FileReader","callBack","onloadend","ev","result","JSON","parse","files","readAsText","setCourse","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ae2238d4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport DataTable from 'react-data-table-component'\n\n\nclass DataTableApi extends Component<{ data: string[][] }, {}> {\n\n    public render() {\n        const headerRow = this.props.data[0];\n        const columns = headerRow.map((header, index) => {\n            return {\n                name: header,\n                selector: index.toString(),\n                wrap: true,\n                minWidth: \"120px\"\n            }\n        });\n        const dataRows = this.props.data.slice(1, this.props.data.length);\n        const data = dataRows.map((row, index) => {\n            const flatMappedData: any = {};\n            row.forEach((val, index) => {\n                const key = index.toString()\n                flatMappedData[key] = val;\n            });\n            return flatMappedData;\n        })\n        return (\n            <DataTable noHeader={true} data={data} columns={columns}\n                fixedHeaderScrollHeight=\"300px\"></DataTable>\n\n        );\n    }\n}\n\nexport default DataTableApi;\n","import React, { Component } from 'react';\nclass SelectAPI extends Component<{ options: string[], value: string, handleChange(val: string): void }, {}> {\n    constructor(props: any) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    public render() {\n        const optionsHTML = this.props.options.map((option, i) => {\n            return <option key={'option: ' + i}>{option}</option>\n        })\n        return <div>\n            <select value={this.props.value} onChange={this.handleChange}>\n                {optionsHTML}\n            </select>\n        </div>\n    }\n\n    public handleChange(event: React.ChangeEvent<HTMLSelectElement>) {\n        this.props.handleChange(event.target.value);\n    }\n}\n\nexport default SelectAPI;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport DataTableApi from '../DataTableApi/DataTableApi';\nimport SelectAPI from '../SelectAPI/SelectAPI';\n\nconst options = ['Any', '3', '4', '5'];\nclass PinDepthTable extends Component<{ dataService: DataService }, { parFilter: string }> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      parFilter: '3'\n    }\n    this.handleParFilterChange = this.handleParFilterChange.bind(this);\n  }\n\n  public render() {\n    let holeIds: number[] = [];\n    if (this.state.parFilter === 'Any') {\n      holeIds = this.props.dataService.getAllHoleIds(null);\n    } else {\n      holeIds = this.props.dataService.getAllHoleIds(this.state.parFilter);\n    }\n    const pinLocationIds = this.props.dataService.getAllPinLocationIds();\n\n    // construct header row\n    const headerRow: string[] = [];\n    headerRow.push('Pin Location Id');\n    holeIds.forEach((holeId) => {\n      headerRow.push('Hole #' + holeId.toString());\n    });\n    headerRow.push('Total');\n\n    // construct data rows\n    const dataRows = pinLocationIds.map((pinId) => {\n      // construct data row\n      const dataRow: string[] = [];\n      dataRow.push(pinId.toString());\n      let rowSum = 0;\n      holeIds.forEach((holeId) => {\n        const pinInfo = this.props.dataService.getPinInfoForHole(holeId, pinId);\n        // default\n        let cellVal = '-';\n        if (pinInfo) {\n          rowSum += pinInfo.depth;\n          cellVal = pinInfo.depth.toString();\n        }\n        dataRow.push(cellVal);\n      });\n      dataRow.push(rowSum.toString());\n      return dataRow;\n    });\n\n\n    const finalData: string[][] = [];\n    finalData.push(headerRow);\n    dataRows.forEach((row) => finalData.push(row));\n\n    return (<div>\n      <div>\n        Par\n        <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n      </div>\n      <DataTableApi data={finalData}></DataTableApi>\n    </div>);\n  }\n  public handleParFilterChange(newVal: string) {\n    this.setState({ parFilter: newVal });\n  }\n}\n\nexport default PinDepthTable;\n","export class YardageUtils {\n  public static computePlusMinus(total: number) {\n    return Math.floor(total / 2) - 1;\n  }\n}\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport DataTableApi from '../DataTableApi/DataTableApi';\nimport SelectAPI from '../SelectAPI/SelectAPI';\nimport { YardageUtils } from '../../services/yardage-utils';\n\nconst options = ['Any', '3', '4', '5'];\nclass MarkerDepthTable extends Component<{ dataService: DataService }, { parFilter: string }> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            parFilter: '3'\n        }\n        this.handleParFilterChange = this.handleParFilterChange.bind(this);\n    }\n    public render() {\n        let holeIds: number[] = [];\n        if (this.state.parFilter === 'Any') {\n            holeIds = this.props.dataService.getAllHoleIds(null);\n        } else {\n            holeIds = this.props.dataService.getAllHoleIds(this.state.parFilter);\n        }\n        const teeBoxIds = this.props.dataService.getAllTeeboxIds();\n\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Teebox Id');\n        holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n        headerRow.push('Total');\n\n        // construct data rows\n        const dataRows = teeBoxIds.map((markerId) => {\n            // construct data row\n            const dataRow: string[] = [];\n            dataRow.push(markerId.toString());\n            let depthSum = 0;\n            let deltaSum = 0;\n            holeIds.forEach((holeId) => {\n                const markerInfo = this.props.dataService.getTeeboxInfoForHole(holeId, markerId);\n                // default\n                let cellVal = '-';\n                if (markerInfo) {\n                    const depth = markerInfo.depth;\n                    const delta = YardageUtils.computePlusMinus(depth);\n                    depthSum += depth;\n                    deltaSum += delta;\n                    cellVal = '(' + depth.toString() + ' / 2) - 1 => \\xB1 ' + delta.toString();\n                }\n                dataRow.push(cellVal);\n            });\n            dataRow.push(depthSum.toString() + ' => \\xB1 ' + deltaSum.toString());\n            return dataRow;\n        });\n\n\n        const finalData: string[][] = [];\n        finalData.push(headerRow);\n        dataRows.forEach((row) => finalData.push(row));\n\n        return (<div>\n            <div>\n                Par <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n            </div>\n            <DataTableApi data={finalData}></DataTableApi>\n        </div>);\n    }\n    public handleParFilterChange(newVal: string) {\n        this.setState({ parFilter: newVal });\n    }\n}\n\nexport default MarkerDepthTable;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport DataTableApi from '../DataTableApi/DataTableApi';\nimport SelectAPI from '../SelectAPI/SelectAPI';\n\nconst options = ['Any', '3', '4', '5'];\nclass HoleYardageTable extends Component<{ dataService: DataService }, { parFilter: string }> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      parFilter: '3'\n    }\n    this.handleParFilterChange = this.handleParFilterChange.bind(this);\n  }\n\n  public render() {\n    let holeIds: number[] = [];\n    if (this.state.parFilter === 'Any') {\n      holeIds = this.props.dataService.getAllHoleIds(null);\n    } else {\n      holeIds = this.props.dataService.getAllHoleIds(this.state.parFilter);\n    }\n    const teeBoxIds = this.props.dataService.getAllTeeboxIds();\n\n    // construct header row\n    const headerRow: string[] = [];\n    headerRow.push('Teebox Id');\n    holeIds.forEach((holeId) => {\n      headerRow.push('Hole #' + holeId.toString());\n    });\n    headerRow.push('Total');\n\n    // construct data rows\n    const dataRows = teeBoxIds.map((markerId) => {\n      // construct data row\n      const dataRow: string[] = [];\n      dataRow.push(markerId.toString());\n      let yardageSum = 0;\n      holeIds.forEach((holeId) => {\n        const markerInfo = this.props.dataService.getTeeboxInfoForHole(holeId, markerId);\n        // default\n        let cellVal = '-';\n        if (markerInfo) {\n          const yardage = markerInfo.yardage;\n          yardageSum += yardage;\n          cellVal = yardage.toString();\n        }\n        dataRow.push(cellVal);\n      });\n      dataRow.push(yardageSum.toString());\n      return dataRow;\n    });\n\n\n\n    const finalData: string[][] = [];\n    finalData.push(headerRow);\n    dataRows.forEach((row) => finalData.push(row));\n\n    return (<div>\n      <div>\n        Par\n        <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n      </div>\n      <DataTableApi data={finalData}></DataTableApi>\n    </div>);\n  }\n  public handleParFilterChange(newVal: string) {\n    this.setState({ parFilter: newVal });\n  }\n}\n\nexport default HoleYardageTable;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport DataTableApi from '../DataTableApi/DataTableApi';\nimport SelectAPI from '../SelectAPI/SelectAPI';\nimport { YardageUtils } from '../../services/yardage-utils';\n\nconst options = ['Any', '3', '4', '5'];\nclass CourseAnalysisTable extends Component<{ dataService: DataService }, { parFilter: string, teeBoxFilter: string }> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            parFilter: '3',\n            teeBoxFilter: '1'\n        }\n        this.handleParFilterChange = this.handleParFilterChange.bind(this);\n        this.handleTeeBoxFilterChange = this.handleTeeBoxFilterChange.bind(this);\n    }\n    public render() {\n        let holeIds: number[] = [];\n        if (this.state.parFilter === 'Any') {\n            holeIds = this.props.dataService.getAllHoleIds(null);\n        } else {\n            holeIds = this.props.dataService.getAllHoleIds(this.state.parFilter);\n        }\n        const teeBoxIds = this.props.dataService.getAllTeeboxIds();\n        const pinIds = this.props.dataService.getAllPinLocationIds();\n\n        const teeBoxId = parseInt(this.state.teeBoxFilter);\n\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Pin Location Id');\n        holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n        headerRow.push('Total');\n\n        // construct data rows\n        const dataRows = pinIds.map((pinId) => {\n            // construct data row\n            const dataRow: string[] = [];\n            dataRow.push(pinId.toString());\n            let maxSum = 0;\n            let minSum = 0;\n            holeIds.forEach((holeId) => {\n                const teeBoxInfo = this.props.dataService.getTeeboxInfoForHole(holeId, teeBoxId);\n                const pinInfo = this.props.dataService.getPinInfoForHole(holeId, pinId);\n                // default\n                let cellVal = '-';\n                if (teeBoxInfo && pinInfo) {\n                    const yardage = teeBoxInfo.yardage;\n                    const pinDepth = pinInfo.depth;\n                    const markerDepth = teeBoxInfo.depth;\n                    const slope = teeBoxInfo.slope;\n                    const markerDepthDelta = YardageUtils.computePlusMinus(markerDepth);\n                    // max\n                    const highTotal = yardage + pinDepth + slope + markerDepthDelta;\n                    maxSum += highTotal;\n                    // min\n                    const lowTotal = yardage + pinDepth + slope - markerDepthDelta;\n                    minSum += lowTotal;\n                    cellVal = yardage.toString() + ' + ' + pinDepth.toString() + ' + ' + slope.toString() + ' \\xB1  ' + markerDepthDelta.toString() + ' = ( ' + lowTotal.toString() + ', ' + highTotal.toString() + ' )';\n                }\n                dataRow.push(cellVal);\n            });\n            dataRow.push('( ' + minSum.toString() + ', ' + maxSum.toString() + ' )');\n            return dataRow;\n        });\n\n        const finalData: string[][] = [];\n        finalData.push(headerRow);\n        dataRows.forEach((row) => finalData.push(row));\n\n        const teeBoxIdsAsStr = teeBoxIds.map((id) => id.toString());\n        return (<div>\n            <div>\n                Par <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n                Teebox <SelectAPI value={this.state.teeBoxFilter} options={teeBoxIdsAsStr} handleChange={this.handleTeeBoxFilterChange}></SelectAPI>\n            </div>\n            <DataTableApi data={finalData}></DataTableApi>\n        </div>);\n    }\n    public handleParFilterChange(newVal: string) {\n        this.setState({ parFilter: newVal });\n    }\n\n    public handleTeeBoxFilterChange(newVal: string) {\n        this.setState({ teeBoxFilter: newVal });\n    }\n\n}\n\nexport default CourseAnalysisTable;\n","import React, { Component } from 'react';\n\ntype DynamicInputRangeProps = {\n    //\n    value: number,\n    index: number,\n    max: number,\n    min: number,\n    handleChange(i: number, value: number): void\n};\n\nclass DynamicInputRange extends Component<DynamicInputRangeProps, any> {\n    constructor(props: DynamicInputRangeProps) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    public render() {\n\n        return <div>\n            <input type=\"range\" min={this.props.min} max={this.props.max} value={this.props.value} onChange={this.handleChange}></input><input type=\"number\" value={this.props.value} onChange={this.handleChange} ></input>\n        </div>;\n    }\n    public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        const newVal = parseInt(event.target.value);\n        if (newVal) {\n            this.props.handleChange(this.props.index, newVal);\n        } else {\n            this.props.handleChange(this.props.index, 0);\n        }\n    }\n}\n\nexport default DynamicInputRange;\n","import { DataService } from \"./data-service\";\nimport { YardageUtils } from \"./yardage-utils\";\nimport { IYardageCalc } from \"../interfaces/IYardageCalc\";\n\nexport class CalculationUtils {\n  public static canCombinationProduceDesiredYardage(\n    dataService: DataService,\n    holeId: number,\n    pinId: number,\n    teeBoxId: number,\n    desiredYardage: number\n  ) {\n    let retVal = false;\n    // get pinInfo for the hole\n    const pinInfo = dataService.getPinInfoForHole(holeId, pinId);\n    // if teeBoxInfo can get the desiredYardage then add it\n    const teeBoxInfo = dataService.getTeeboxInfoForHole(holeId, teeBoxId);\n    if (pinInfo && teeBoxInfo) {\n      // constants\n      const yardage = teeBoxInfo.yardage;\n      const slope = teeBoxInfo.slope;\n      const pinDepth = pinInfo.depth;\n      const constantYardage = yardage + pinDepth + slope;\n      const markerDelta = YardageUtils.computePlusMinus(teeBoxInfo.depth);\n      const desiredYardageDelta = constantYardage - desiredYardage;\n      const absDesiredYardageDelta = Math.abs(desiredYardageDelta);\n      // this hole, pin, and teeBox combination can be used for this desired yardage\n      if (absDesiredYardageDelta < markerDelta) retVal = true;\n    }\n\n    return retVal;\n  }\n  public static findAllCombos(\n    holeIds: number[],\n    desiredYardages: number[],\n    mixAndMatchPinIdsAllowed: boolean,\n    yardageCalcArr: IYardageCalc[]\n  ): IYardageCalc[][] {\n    const combos: IYardageCalc[][] = [];\n    let combo: IYardageCalc[] = [];\n    this.recursiveFunction(\n      combo,\n      combos,\n      holeIds,\n      desiredYardages,\n      mixAndMatchPinIdsAllowed,\n      yardageCalcArr\n    );\n    return combos;\n  }\n  private static recursiveFunction(\n    combo: IYardageCalc[],\n    combos: IYardageCalc[][],\n    holeIds: number[],\n    desiredYardages: number[],\n    mixAndMatchPinIdsAllowed: boolean,\n    possibleValues: IYardageCalc[]\n  ) {\n    // success base case\n    if (combo.length === desiredYardages.length) {\n      combos.push(this.cloneCombo(combo));\n      return;\n    }\n    // failure base case\n    if (possibleValues.length === 0) {\n      return;\n    }\n    // filter out\n    const filtered: IYardageCalc[] = this.filterPossibleValues(\n      possibleValues,\n      combo,\n      mixAndMatchPinIdsAllowed\n    );\n    while (filtered.length !== 0) {\n      const lastElement = filtered.pop();\n      if (lastElement) {\n        // add to combo\n        combo.push(lastElement);\n        // recurse\n        this.recursiveFunction(\n          combo,\n          combos,\n          holeIds,\n          desiredYardages,\n          mixAndMatchPinIdsAllowed,\n          filtered\n        );\n        // remove from combo\n        combo.pop();\n      }\n    }\n  }\n  public static filterPossibleValues(\n    possibleValues: IYardageCalc[],\n    combo: IYardageCalc[],\n    mixAndMatchPinIdsAllowed: boolean\n  ): IYardageCalc[] {\n    const comboHoleIds = combo.map((val) => val.holeId);\n    const comboDesiredYardages = combo.map((val) => val.desiredYardage);\n    if (combo.length === 0) {\n      return possibleValues;\n    } else {\n      const comboPinId = combo[0].pinId;\n      let filtered = possibleValues\n        .filter((val) => {\n          return (\n            comboHoleIds.findIndex((holeId) => val.holeId === holeId) === -1\n          );\n        })\n        .filter((val) => {\n          return (\n            comboDesiredYardages.findIndex(\n              (dy) => val.desiredYardage === dy\n            ) === -1\n          );\n        });\n      // mix and matching pin ids\n      if (!mixAndMatchPinIdsAllowed) {\n        filtered = filtered.filter((val) => {\n          if (comboPinId) {\n            return val.pinId === comboPinId;\n          } else {\n            return false;\n          }\n        });\n      }\n\n      return filtered;\n    }\n  }\n\n  private static cloneCombo(combo: IYardageCalc[]) {\n    const cloned: IYardageCalc[] = [];\n    combo.forEach((val) => cloned.push(val));\n    return cloned;\n  }\n}\n","import React, { Component } from 'react';\nimport { IYardageCalc } from '../../../interfaces/IYardageCalc';\nimport DataTableApi from '../../DataTableApi/DataTableApi';\n\n\n\n\nclass DesiredYardageCountTable extends Component<{ holeIds: number[], desiredYardages: number[], yardageCalcArr: IYardageCalc[] }, {}> {\n\n    public render() {\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Yardage');\n        this.props.holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n        headerRow.push('Total');\n\n        // construct data rows\n        const dataRows = this.props.desiredYardages.map((desiredYardage) => {\n            // construct data row\n            const dataRow: string[] = [];\n            dataRow.push(desiredYardage.toString());\n            let count = 0;\n            this.props.holeIds.forEach((holeId) => {\n                // default\n                const filtered = this.props.yardageCalcArr.filter((val) => val.holeId === holeId && val.desiredYardage === desiredYardage);\n                let numOfMatches = filtered.length;\n                dataRow.push(numOfMatches.toString());\n                count += numOfMatches;\n            });\n            dataRow.push(count.toString());\n            return dataRow;\n        });\n\n        const countData: string[][] = [];\n        countData.push(headerRow);\n        dataRows.forEach((row) => countData.push(row));\n\n        return (<div>\n            <DataTableApi data={countData}></DataTableApi>\n        </div>);\n    }\n\n}\n\nexport default DesiredYardageCountTable;\n","import React, { Component } from 'react';\nimport { IYardageCalc } from '../../../interfaces/IYardageCalc';\nimport DataTableApi from '../../DataTableApi/DataTableApi';\nimport { CalculationUtils } from '../../../services/calculation-utils';\nimport { DataService } from '../../../services/data-service';\n\nclass CombinationTable extends Component<{ dataService: DataService, holeIds: number[], mixAndMatchPinIdsAllowed: boolean, desiredYardages: number[], yardageCalcArr: IYardageCalc[] }, {}> {\n\n    constructor(props: any) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    public render() {\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Combination');\n        this.props.holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n\n        // compute combinations\n        const combos = CalculationUtils.findAllCombos(this.props.holeIds, this.props.desiredYardages, this.props.mixAndMatchPinIdsAllowed, this.props.yardageCalcArr);\n        combos.sort((a: IYardageCalc[], b: IYardageCalc[]) => {\n            return a[0].pinId - b[0].pinId;\n        });\n        // construct data rows\n        const dataRows = combos.map((combo, index) => {\n            // construct data row\n            const dataRow: string[] = [];\n            dataRow.push((index + 1).toString() + ' => Pin# ' + combo[0].pinId);\n            this.props.holeIds.forEach((holeId) => {\n                // default\n                let cellVal = '-';\n                const found = combo.find((val) => val.holeId === holeId);\n                if (found) {\n                    // show calculations\n                    const pinInfo = this.props.dataService.getPinInfoForHole(found.holeId, found.pinId);\n                    const teeBoxInfo = this.props.dataService.getTeeboxInfoForHole(found.holeId, found.teeBoxId);\n                    if (pinInfo && teeBoxInfo) {\n                        // constants\n                        const yardage = teeBoxInfo.yardage;\n                        const slope = teeBoxInfo.slope;\n                        const pinDepth = pinInfo.depth;\n                        const constantYardage = yardage + pinDepth + slope;\n                        const markerAdjustment = found.desiredYardage - constantYardage;\n\n                        cellVal = yardage.toString() + ' + ' + pinDepth.toString() + ' + ' + slope.toString() + ' + ' + markerAdjustment.toString() + ' = ' + found.desiredYardage.toString() + ' => Teebox# ' + teeBoxInfo.id;\n                    }\n\n                }\n                dataRow.push(cellVal);\n            });\n            return dataRow;\n        });\n\n        const countData: string[][] = [];\n        countData.push(headerRow);\n        dataRows.forEach((row) => countData.push(row));\n\n        return (<div>\n            <DataTableApi data={countData}></DataTableApi>\n        </div>);\n    }\n    handleClick() {\n\n    }\n\n}\n\nexport default CombinationTable;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport SelectAPI from '../SelectAPI/SelectAPI';\nimport DynamicInputRange from '../DynamicInputRange/DynamicInputRange';\nimport { CalculationUtils } from '../../services/calculation-utils';\nimport { IYardageCalc } from '../../interfaces/IYardageCalc';\nimport DesiredYardageCountTable from './DesiredYardageCountTable/DesiredYardageCountTable';\nimport CombinationTable from './CombinationTable/CombinationTable';\nimport { IAdjustablePinInfo } from '../../interfaces/IAdjustablePinInfo';\n\n\nconst parOptions = ['3', '4', '5'];\nconst defaultParToBeginingYardage = {\n    3: 120,\n    4: 280,\n    5: 400,\n}\n\n\n\nclass FinalAnalysisTable extends Component<{ dataService: DataService, reRender: any }, { parFilter: string, mixAndMatchPinIdsAllowed: boolean, desiredYardages: number[], adjustablePinLocations: IAdjustablePinInfo[] }> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            parFilter: '3',\n            mixAndMatchPinIdsAllowed: false,\n            desiredYardages: [120, 140, 160, 180, 200],\n            adjustablePinLocations: [{ holeId: 2, depth: 0 }, { holeId: 5, depth: 0 }, { holeId: 8, depth: 0 }, { holeId: 12, depth: 0 }, { holeId: 17, depth: 0 }],\n        }\n        this.handleParFilterChange = this.handleParFilterChange.bind(this);\n        this.handleDesiredYardageChange = this.handleDesiredYardageChange.bind(this);\n        this.handleAdjustablePinChange = this.handleAdjustablePinChange.bind(this);\n        this.handleMixAndMatchPinIdsAllowedChange = this.handleMixAndMatchPinIdsAllowedChange.bind(this);\n\n        this.cloneNumberArray = this.cloneNumberArray.bind(this);\n    }\n    public render() {\n        let holeIds: number[] = [];\n        holeIds = this.props.dataService.getAllHoleIds(this.state.parFilter);\n        const teeBoxIds = this.props.dataService.getAllTeeboxIds();\n        const pinIds = this.props.dataService.getAllPinLocationIds();\n\n        // construct header row\n        const headerRow: string[] = [];\n        headerRow.push('Options');\n        holeIds.forEach((holeId) => {\n            headerRow.push('Hole #' + holeId.toString());\n        });\n        headerRow.push('Total');\n\n        const desiredYardageInputs = this.state.desiredYardages.map((desiredYardage, i) => {\n            return <DynamicInputRange key={'possbileVal' + i} value={desiredYardage} index={i} min={50} max={250} handleChange={this.handleDesiredYardageChange}></DynamicInputRange>;\n        })\n\n        const adjustablePinLocations = this.state.adjustablePinLocations.map((adjustablePin, i) => {\n            return <DynamicInputRange key={'adjustablePin' + i} value={adjustablePin.depth} index={i} min={-20} max={20} handleChange={this.handleAdjustablePinChange}></DynamicInputRange>;\n        });\n        const yardageCalcArr: IYardageCalc[] = [];\n        holeIds.forEach((holeId) => {\n            pinIds.forEach((pinId) => {\n                teeBoxIds.forEach(teeBoxId => {\n                    this.state.desiredYardages.forEach((desiredYardage) => {\n                        if (CalculationUtils.canCombinationProduceDesiredYardage(this.props.dataService, holeId, pinId, teeBoxId, desiredYardage)) {\n                            yardageCalcArr.push({\n                                holeId: holeId,\n                                pinId: pinId,\n                                teeBoxId: teeBoxId,\n                                desiredYardage: desiredYardage\n                            })\n                        }\n                    });\n                });\n            });\n        });\n\n        return (<div>\n            <div>Par <SelectAPI value={this.state.parFilter} options={parOptions} handleChange={this.handleParFilterChange}></SelectAPI></div>\n            <div>Yardage Inputs {desiredYardageInputs}</div>\n            <div>(Optional) Adjustable Pin Id : 7 {adjustablePinLocations}</div>\n            <div>Mix And Match Pin Ids<input type=\"checkbox\" checked={this.state.mixAndMatchPinIdsAllowed} onChange={this.handleMixAndMatchPinIdsAllowedChange}></input> Note: This calculation could take a few seconds</div>\n            <div>\n                <h3>Combinations Table</h3>\n                <div>{'Yardage + Pin Depth + Slope + Teebox Adjustment = Desired Yardage'}</div>\n                <br></br>\n                <CombinationTable dataService={this.props.dataService} holeIds={holeIds} mixAndMatchPinIdsAllowed={this.state.mixAndMatchPinIdsAllowed} desiredYardages={this.state.desiredYardages} yardageCalcArr={yardageCalcArr} ></CombinationTable>\n            </div>\n            <div>\n                <h3>Possibilities Table</h3>\n                <DesiredYardageCountTable holeIds={holeIds} desiredYardages={this.state.desiredYardages} yardageCalcArr={yardageCalcArr} ></DesiredYardageCountTable>\n            </div>\n\n\n        </div>);\n    }\n\n    public handleDesiredYardageChange(index: number, newVal: number) {\n        const cloned = this.cloneNumberArray(this.state.desiredYardages);\n        cloned[index] = newVal;\n        this.setState({ desiredYardages: cloned })\n    }\n    public handleAdjustablePinChange(index: number, newVal: number) {\n        const cloned = this.cloneAdjustablePinLocations(this.state.adjustablePinLocations);\n        const previousInfo = cloned[index];\n        cloned[index] = { holeId: previousInfo.holeId, depth: newVal };\n        this.setState({ adjustablePinLocations: cloned });\n        this.props.dataService.setAdjustablePinDepths(cloned);\n        // re render\n        this.props.reRender();\n    }\n\n    public cloneAdjustablePinLocations(arr: IAdjustablePinInfo[]) {\n        const cloned: IAdjustablePinInfo[] = [];\n        arr.forEach(val => cloned.push(val));\n        return cloned;\n    }\n    public cloneNumberArray(arr: number[]) {\n        const cloned: number[] = [];\n        arr.forEach(val => cloned.push(val));\n        return cloned;\n    }\n    public handleParFilterChange(newVal: string) {\n        // set default desired yardage\n        const holeIds = this.props.dataService.getAllHoleIds(newVal);\n        const newPar = parseInt(newVal);\n        let beginVal = 0;\n        switch (newPar) {\n            case 3:\n                beginVal = defaultParToBeginingYardage[3];\n                break;\n            case 4:\n                beginVal = defaultParToBeginingYardage[4];\n                break;\n            case 5:\n                beginVal = defaultParToBeginingYardage[5]\n                break;\n            default:\n                break;\n        }\n        const yardageChange = 20;\n        const createdDesireYardages: number[] = [];\n        for (let i = 0; i < holeIds.length; i++) {\n            createdDesireYardages.push(beginVal + (i * yardageChange));\n        }\n\n        const createdAdjustablePinLocations: IAdjustablePinInfo[] = holeIds.map((holeId) => {\n            return { holeId: holeId, depth: 0 };\n        });\n        this.setState({ desiredYardages: createdDesireYardages });\n        this.setState({ adjustablePinLocations: createdAdjustablePinLocations });\n        this.setState({ parFilter: newVal });\n    }\n\n    public handleMixAndMatchPinIdsAllowedChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({ mixAndMatchPinIdsAllowed: event.target.checked });\n    }\n\n}\n\nexport default FinalAnalysisTable;\n","import React, { Component } from 'react';\nimport { DataService } from '../../services/data-service';\nimport DataTableApi from '../DataTableApi/DataTableApi';\nimport SelectAPI from '../SelectAPI/SelectAPI';\n\nconst options = ['Any', '3', '4', '5'];\nclass SlopeTable extends Component<{ dataService: DataService }, { parFilter: string }> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      parFilter: '3'\n    }\n    this.handleParFilterChange = this.handleParFilterChange.bind(this);\n  }\n\n  public render() {\n    let holeIds: number[] = [];\n    if (this.state.parFilter === 'Any') {\n      holeIds = this.props.dataService.getAllHoleIds(null);\n    } else {\n      holeIds = this.props.dataService.getAllHoleIds(this.state.parFilter);\n    }\n    const teeBoxIds = this.props.dataService.getAllTeeboxIds();\n\n    // construct header row\n    const headerRow: string[] = [];\n    headerRow.push('Teebox Id');\n    holeIds.forEach((holeId) => {\n      headerRow.push('Hole #' + holeId.toString());\n    });\n    headerRow.push('Total');\n\n    // construct data rows\n    const dataRows = teeBoxIds.map((markerId) => {\n      // construct data row\n      const dataRow: string[] = [];\n      dataRow.push(markerId.toString());\n      let slopeSum = 0;\n      holeIds.forEach((holeId) => {\n        const markerInfo = this.props.dataService.getTeeboxInfoForHole(holeId, markerId);\n        // default\n        let cellVal = '-';\n        if (markerInfo) {\n          const slope = markerInfo.slope;\n          slopeSum += slope;\n          cellVal = slope.toString();\n        }\n        dataRow.push(cellVal);\n      });\n      dataRow.push(slopeSum.toString());\n      return dataRow;\n    });\n\n\n\n    const finalData: string[][] = [];\n    finalData.push(headerRow);\n    dataRows.forEach((row) => finalData.push(row));\n\n    return (<div>\n      <div>\n        Par\n        <SelectAPI value={this.state.parFilter} options={options} handleChange={this.handleParFilterChange}></SelectAPI>\n      </div>\n      <DataTableApi data={finalData}></DataTableApi>\n    </div>);\n  }\n  public handleParFilterChange(newVal: string) {\n    this.setState({ parFilter: newVal });\n  }\n}\n\nexport default SlopeTable;\n","import { IAdjustablePinInfo } from \"../interfaces/IAdjustablePinInfo\";\nimport testData from \"../resources/data.json\";\nimport { ICourse } from \"../resources/interfaces/ICourse\";\n\nexport class DataService {\n  private course: ICourse = testData;\n  private adjustablePinDepths: IAdjustablePinInfo[] = [];\n  private adjustablePinId: number = 7;\n  setCourse(course: ICourse) {\n    this.course = course;\n  }\n  public getAllData() {\n    return this.course;\n  }\n\n  public setAdjustablePinDepths(newVal: IAdjustablePinInfo[]) {\n    this.adjustablePinDepths = newVal;\n  }\n\n  public getAllHoleIds(parFilter: string | null) {\n    // apply filters\n    let fitleredHoles = this.course.holes;\n    if (parFilter) {\n      fitleredHoles = this.course.holes.filter(\n        (hole) => hole.par.toString() === parFilter\n      );\n    } else {\n      fitleredHoles = this.course.holes;\n    }\n\n    const holeIds = fitleredHoles.map((hole) => {\n      return hole.id;\n    });\n    return holeIds;\n  }\n  public getAllPinLocationIds() {\n    const allIds: number[] = [];\n    this.course.holes.forEach((hole) => {\n      const pinLocationIdsForHole = hole.pinLocations.map((pinLocation) => {\n        return pinLocation.id;\n      });\n      // add all new ids\n      pinLocationIdsForHole.forEach((id) => {\n        if (!allIds.includes(id)) {\n          allIds.push(id);\n        }\n      });\n    });\n    this.adjustablePinId = allIds.length + 1;\n    allIds.push(this.adjustablePinId);\n    return allIds;\n  }\n  public getPinInfoForHole(holeId: number, pinId: number) {\n    let retVal = null;\n    const foundHole = this.course.holes.find((hole) => hole.id === holeId);\n    if (foundHole) {\n      const foundPinLocationInfo = foundHole.pinLocations.find(\n        (pinLocation) => pinLocation.id === pinId\n      );\n      if (foundPinLocationInfo) {\n        retVal = foundPinLocationInfo;\n      } else {\n        console.log(\n          \"Could not find pin location \" + pinId + \" at hole \" + holeId + \".\"\n        );\n\n        if (pinId === this.adjustablePinId) {\n          const foundAdjustableInfo = this.adjustablePinDepths.find(\n            (pinInfo) => pinInfo.holeId === holeId\n          );\n          if (foundAdjustableInfo) {\n            retVal = {\n              id: pinId,\n              depth: foundAdjustableInfo.depth,\n            };\n          } else {\n            console.log(\"Couldn't find adjustable pin Depth\");\n          }\n        }\n      }\n    } else {\n      console.log(\"Could not find hole \" + holeId + \".\");\n    }\n    return retVal;\n  }\n  public getAllTeeboxIds() {\n    const allIds: number[] = [];\n    this.course.holes.forEach((hole) => {\n      if (hole.teeboxes) {\n        const teeBoxIdsForHole = hole.teeboxes.map((teebox) => {\n          return teebox.id;\n        });\n        // add all new ids\n        teeBoxIdsForHole.forEach((id) => {\n          if (!allIds.includes(id)) {\n            allIds.push(id);\n          }\n        });\n      }\n    });\n    return allIds;\n  }\n  public getTeeboxInfoForHole(holeId: number, teeBoxId: number) {\n    let retVal = null;\n    const foundHole = this.course.holes.find((hole) => hole.id === holeId);\n    if (foundHole) {\n      if (foundHole.teeboxes) {\n        const foundTeeBoxInfo = foundHole.teeboxes.find(\n          (teeBox) => teeBox.id === teeBoxId\n        );\n        if (foundTeeBoxInfo) {\n          retVal = foundTeeBoxInfo;\n        } else {\n          console.log(\n            \"Could not find teeBox \" + teeBoxId + \" at hole \" + holeId + \".\"\n          );\n        }\n      }\n    } else {\n      console.log(\"Could not find hole \" + holeId + \".\");\n    }\n    return retVal;\n  }\n}\n","import React, { Component } from 'react';\nimport PinDepthTable from '../PinDepthTable/PinDepthTable';\nimport MarkerDepthTable from '../MarkerDepthTable/MarkerDepthTable';\nimport HoleYardageTable from '../HoleYardageTable/HoleYardageTable';\nimport CourseAnalysisTable from '../CourseAnalysisTable/CourseAnalysisTable';\nimport FinalAnalysisTable from '../FinalAnalysisTable/FinalAnalysisTable';\nimport SlopeTable from '../SlopeTable/SlopeTable';\nimport { DataService } from '../../services/data-service';\n\nclass Main extends Component<any, { pinLocationId: number, overviewPinDepthSum: number, dataService: DataService, reRender: boolean }> {\n\n\n  constructor(props: any) {\n    super(props);\n    const createdDataService = new DataService();\n    this.state = {\n      pinLocationId: 1,\n      overviewPinDepthSum: 0,\n      dataService: createdDataService,\n      reRender: false\n    }\n    this.handlePinLocationIdChange = this.handlePinLocationIdChange.bind(this);\n    this.handleUploadFileChange = this.handleUploadFileChange.bind(this);\n    this.setDataServiceToNewFile = this.setDataServiceToNewFile.bind(this);\n    this.reRender = this.reRender.bind(this);\n  }\n\n  public render() {\n    return (<div>\n      <div>\n        <h1>Custom Inputs</h1>\n        <div>\n          <div>Upload <input type=\"file\" accept=\".json\" onChange={this.handleUploadFileChange}></input></div>\n          <div>Download Original Data: <a href='https://drive.google.com/file/d/1C0cUoiSHonKCfyXHYroZLH3DznETKwGB/view?usp=sharing' >Download</a></div>\n        </div>\n        <h1>Final Analysis</h1>\n        <FinalAnalysisTable dataService={this.state.dataService} reRender={this.reRender}></FinalAnalysisTable>\n        <h1>Data Overview</h1>\n        <h3>Pin Depths</h3>\n        <PinDepthTable dataService={this.state.dataService}></PinDepthTable>\n        <h3>Teebox Depths</h3>\n        <div>{'(Teebox Depth / 2) - 1'}</div>\n        <br></br>\n        <MarkerDepthTable dataService={this.state.dataService}></MarkerDepthTable>\n        <h3>Course Analysis</h3>\n        <div>{'Yardage + Pin Depth + Slope \\xB1 Teebox Depth'}</div>\n        <br></br>\n        <CourseAnalysisTable dataService={this.state.dataService}></CourseAnalysisTable>\n        <h3>Hole Yardages</h3>\n        <HoleYardageTable dataService={this.state.dataService}></HoleYardageTable>\n        <h3>Slope Table</h3>\n        <SlopeTable dataService={this.state.dataService}></SlopeTable>\n\n\n      </div>\n      <br></br>\n      <br></br>\n\n    </div>);\n  }\n\n  public handlePinLocationIdChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    const val = parseInt(event.target.value);\n    this.setState({ pinLocationId: val });\n  }\n\n  public handleUploadFileChange(event: React.ChangeEvent<HTMLInputElement>) {\n    var reader = new FileReader();\n    const callBack = this.setDataServiceToNewFile;\n    reader.onloadend = function (ev: ProgressEvent<FileReader>) {\n      if (ev && ev.target && ev.target.result)\n        callBack(JSON.parse(ev.target.result.toString()));\n    }\n    if (event.target.files)\n      reader.readAsText(event.target.files[0]);\n  }\n  public setDataServiceToNewFile(data: any) {\n    const createdDataService = new DataService();\n    createdDataService.setCourse(data);\n    this.setState({ dataService: createdDataService });\n  }\n\n  public reRender() {\n    this.setState({ reRender: !this.state.reRender });\n  }\n\n}\n\nexport default Main;\n","import React from 'react';\n\nimport './App.css';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}